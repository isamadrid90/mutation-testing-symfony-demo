Escaped mutants:
================

1) /usr/src/myapp/src/Command/AddUserCommand.php:108    [M] NotIdentical

--- Original
+++ New
@@ @@
      */
     protected function interact(InputInterface $input, OutputInterface $output) : void
     {
-        if (null !== $input->getArgument('username') && null !== $input->getArgument('password') && null !== $input->getArgument('email') && null !== $input->getArgument('full-name')) {
+        if (null === $input->getArgument('username') && null !== $input->getArgument('password') && null !== $input->getArgument('email') && null !== $input->getArgument('full-name')) {
             return;
         }
         $this->io->title('Add User Command Interactive Wizard');


2) /usr/src/myapp/src/Command/AddUserCommand.php:108    [M] NotIdentical

--- Original
+++ New
@@ @@
      */
     protected function interact(InputInterface $input, OutputInterface $output) : void
     {
-        if (null !== $input->getArgument('username') && null !== $input->getArgument('password') && null !== $input->getArgument('email') && null !== $input->getArgument('full-name')) {
+        if (null !== $input->getArgument('username') && null === $input->getArgument('password') && null !== $input->getArgument('email') && null !== $input->getArgument('full-name')) {
             return;
         }
         $this->io->title('Add User Command Interactive Wizard');


3) /usr/src/myapp/src/Command/AddUserCommand.php:108    [M] LogicalAnd

--- Original
+++ New
@@ @@
      */
     protected function interact(InputInterface $input, OutputInterface $output) : void
     {
-        if (null !== $input->getArgument('username') && null !== $input->getArgument('password') && null !== $input->getArgument('email') && null !== $input->getArgument('full-name')) {
+        if ((null !== $input->getArgument('username') || null !== $input->getArgument('password')) && null !== $input->getArgument('email') && null !== $input->getArgument('full-name')) {
             return;
         }
         $this->io->title('Add User Command Interactive Wizard');


4) /usr/src/myapp/src/Command/AddUserCommand.php:108    [M] NotIdentical

--- Original
+++ New
@@ @@
      */
     protected function interact(InputInterface $input, OutputInterface $output) : void
     {
-        if (null !== $input->getArgument('username') && null !== $input->getArgument('password') && null !== $input->getArgument('email') && null !== $input->getArgument('full-name')) {
+        if (null !== $input->getArgument('username') && null !== $input->getArgument('password') && null === $input->getArgument('email') && null !== $input->getArgument('full-name')) {
             return;
         }
         $this->io->title('Add User Command Interactive Wizard');


5) /usr/src/myapp/src/Command/AddUserCommand.php:108    [M] LogicalAnd

--- Original
+++ New
@@ @@
      */
     protected function interact(InputInterface $input, OutputInterface $output) : void
     {
-        if (null !== $input->getArgument('username') && null !== $input->getArgument('password') && null !== $input->getArgument('email') && null !== $input->getArgument('full-name')) {
+        if ((null !== $input->getArgument('username') && null !== $input->getArgument('password') || null !== $input->getArgument('email')) && null !== $input->getArgument('full-name')) {
             return;
         }
         $this->io->title('Add User Command Interactive Wizard');


6) /usr/src/myapp/src/Command/AddUserCommand.php:108    [M] NotIdentical

--- Original
+++ New
@@ @@
      */
     protected function interact(InputInterface $input, OutputInterface $output) : void
     {
-        if (null !== $input->getArgument('username') && null !== $input->getArgument('password') && null !== $input->getArgument('email') && null !== $input->getArgument('full-name')) {
+        if (null !== $input->getArgument('username') && null !== $input->getArgument('password') && null !== $input->getArgument('email') && null === $input->getArgument('full-name')) {
             return;
         }
         $this->io->title('Add User Command Interactive Wizard');


7) /usr/src/myapp/src/Command/AddUserCommand.php:108    [M] LogicalAnd

--- Original
+++ New
@@ @@
      */
     protected function interact(InputInterface $input, OutputInterface $output) : void
     {
-        if (null !== $input->getArgument('username') && null !== $input->getArgument('password') && null !== $input->getArgument('email') && null !== $input->getArgument('full-name')) {
+        if (null !== $input->getArgument('username') && null !== $input->getArgument('password') && null !== $input->getArgument('email') || null !== $input->getArgument('full-name')) {
             return;
         }
         $this->io->title('Add User Command Interactive Wizard');


8) /usr/src/myapp/src/Command/AddUserCommand.php:112    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if (null !== $input->getArgument('username') && null !== $input->getArgument('password') && null !== $input->getArgument('email') && null !== $input->getArgument('full-name')) {
             return;
         }
-        $this->io->title('Add User Command Interactive Wizard');
+        
         $this->io->text(['If you prefer to not use this interactive wizard, provide the', 'arguments required by this command as follows:', '', ' $ php bin/console app:add-user username password email@example.com', '', 'Now we\'ll ask you for the value of all the missing command arguments.']);
         // Ask for the username if it's not defined
         $username = $input->getArgument('username');


9) /usr/src/myapp/src/Command/AddUserCommand.php:113    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             return;
         }
         $this->io->title('Add User Command Interactive Wizard');
-        $this->io->text(['If you prefer to not use this interactive wizard, provide the', 'arguments required by this command as follows:', '', ' $ php bin/console app:add-user username password email@example.com', '', 'Now we\'ll ask you for the value of all the missing command arguments.']);
+        $this->io->text(['arguments required by this command as follows:', '', ' $ php bin/console app:add-user username password email@example.com', '', 'Now we\'ll ask you for the value of all the missing command arguments.']);
         // Ask for the username if it's not defined
         $username = $input->getArgument('username');
         if (null !== $username) {


10) /usr/src/myapp/src/Command/AddUserCommand.php:113    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             return;
         }
         $this->io->title('Add User Command Interactive Wizard');
-        $this->io->text(['If you prefer to not use this interactive wizard, provide the', 'arguments required by this command as follows:', '', ' $ php bin/console app:add-user username password email@example.com', '', 'Now we\'ll ask you for the value of all the missing command arguments.']);
+        
         // Ask for the username if it's not defined
         $username = $input->getArgument('username');
         if (null !== $username) {


11) /usr/src/myapp/src/Command/AddUserCommand.php:175    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $email = $input->getArgument('email');
         $fullName = $input->getArgument('full-name');
         $isAdmin = $input->getOption('admin');
-        // make sure to validate the user data is correct
-        $this->validateUserData($username, $plainPassword, $email, $fullName);
+        
         // create the user and hash its password
         $user = new User();
         $user->setFullName($fullName);


12) /usr/src/myapp/src/Command/AddUserCommand.php:191    [M] Ternary

--- Original
+++ New
@@ @@
         $user->setPassword($hashedPassword);
         $this->entityManager->persist($user);
         $this->entityManager->flush();
-        $this->io->success(sprintf('%s was successfully created: %s (%s)', $isAdmin ? 'Administrator user' : 'User', $user->getUsername(), $user->getEmail()));
+        $this->io->success(sprintf('%s was successfully created: %s (%s)', $isAdmin ? 'User' : 'Administrator user', $user->getUsername(), $user->getEmail()));
         $event = $stopwatch->stop('add-user-command');
         if ($output->isVerbose()) {
             $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1024 ** 2));


13) /usr/src/myapp/src/Command/AddUserCommand.php:191    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $user->setPassword($hashedPassword);
         $this->entityManager->persist($user);
         $this->entityManager->flush();
-        $this->io->success(sprintf('%s was successfully created: %s (%s)', $isAdmin ? 'Administrator user' : 'User', $user->getUsername(), $user->getEmail()));
+        
         $event = $stopwatch->stop('add-user-command');
         if ($output->isVerbose()) {
             $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1024 ** 2));


14) /usr/src/myapp/src/Command/AddUserCommand.php:211    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if (null !== $existingUser) {
             throw new RuntimeException(sprintf('There is already a user registered with the "%s" username.', $username));
         }
-        // validate password and email if is not this input means interactive.
-        $this->validator->validatePassword($plainPassword);
+        
         $this->validator->validateEmail($email);
         $this->validator->validateFullName($fullName);
         // check if a user with the same email already exists.


15) /usr/src/myapp/src/Command/AddUserCommand.php:212    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         // validate password and email if is not this input means interactive.
         $this->validator->validatePassword($plainPassword);
-        $this->validator->validateEmail($email);
+        
         $this->validator->validateFullName($fullName);
         // check if a user with the same email already exists.
         $existingEmail = $this->users->findOneBy(['email' => $email]);


16) /usr/src/myapp/src/Command/AddUserCommand.php:213    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         // validate password and email if is not this input means interactive.
         $this->validator->validatePassword($plainPassword);
         $this->validator->validateEmail($email);
-        $this->validator->validateFullName($fullName);
+        
         // check if a user with the same email already exists.
         $existingEmail = $this->users->findOneBy(['email' => $email]);
         if (null !== $existingEmail) {


17) /usr/src/myapp/src/Command/ListUsersCommand.php:80    [M] DecrementInteger

--- Original
+++ New
@@ @@
 
   <info>php %command.full_name%</info> <comment>--send-to=fabien@symfony.com</comment>
 HELP
-)->addOption('max-results', null, InputOption::VALUE_OPTIONAL, 'Limits the number of users listed', 50)->addOption('send-to', null, InputOption::VALUE_OPTIONAL, 'If set, the result is sent to the given email address');
+)->addOption('max-results', null, InputOption::VALUE_OPTIONAL, 'Limits the number of users listed', 49)->addOption('send-to', null, InputOption::VALUE_OPTIONAL, 'If set, the result is sent to the given email address');
     }
     /**
      * This method is executed after initialize(). It usually contains the logic


18) /usr/src/myapp/src/Command/ListUsersCommand.php:80    [M] IncrementInteger

--- Original
+++ New
@@ @@
 
   <info>php %command.full_name%</info> <comment>--send-to=fabien@symfony.com</comment>
 HELP
-)->addOption('max-results', null, InputOption::VALUE_OPTIONAL, 'Limits the number of users listed', 50)->addOption('send-to', null, InputOption::VALUE_OPTIONAL, 'If set, the result is sent to the given email address');
+)->addOption('max-results', null, InputOption::VALUE_OPTIONAL, 'Limits the number of users listed', 51)->addOption('send-to', null, InputOption::VALUE_OPTIONAL, 'If set, the result is sent to the given email address');
     }
     /**
      * This method is executed after initialize(). It usually contains the logic


19) /usr/src/myapp/src/Command/ListUsersCommand.php:93    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $maxResults = $input->getOption('max-results');
         // Use ->findBy() instead of ->findAll() to allow result sorting and limiting
-        $allUsers = $this->users->findBy([], ['id' => 'DESC'], $maxResults);
+        $allUsers = $this->users->findBy([], [], $maxResults);
         // Doctrine query returns an array of objects and we need an array of plain arrays
         $usersAsPlainArrays = array_map(static function (User $user) {
             return [$user->getId(), $user->getFullName(), $user->getUsername(), $user->getEmail(), implode(', ', $user->getRoles())];


20) /usr/src/myapp/src/Command/ListUsersCommand.php:97    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $allUsers = $this->users->findBy([], ['id' => 'DESC'], $maxResults);
         // Doctrine query returns an array of objects and we need an array of plain arrays
         $usersAsPlainArrays = array_map(static function (User $user) {
-            return [$user->getId(), $user->getFullName(), $user->getUsername(), $user->getEmail(), implode(', ', $user->getRoles())];
+            return [$user->getFullName(), $user->getUsername(), $user->getEmail(), implode(', ', $user->getRoles())];
         }, $allUsers);
         // In your console commands you should always use the regular output type,
         // which outputs contents directly in the console window. However, this


21) /usr/src/myapp/src/Command/ListUsersCommand.php:114    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // to send the list of users via email with the '--send-to' option
         $bufferedOutput = new BufferedOutput();
         $io = new SymfonyStyle($input, $bufferedOutput);
-        $io->table(['ID', 'Full Name', 'Username', 'Email', 'Roles'], $usersAsPlainArrays);
+        $io->table(['Full Name', 'Username', 'Email', 'Roles'], $usersAsPlainArrays);
         // instead of just displaying the table of users, store its contents in a variable
         $usersAsATable = $bufferedOutput->fetch();
         $output->write($usersAsATable);


22) /usr/src/myapp/src/Controller/Admin/BlogController.php:56    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     #[Route('/', methods: ['GET'], name: 'admin_post_index')]
     public function index(PostRepository $posts) : Response
     {
-        $authorPosts = $posts->findBy(['author' => $this->getUser()], ['publishedAt' => 'DESC']);
+        $authorPosts = $posts->findBy([], ['publishedAt' => 'DESC']);
         return $this->render('admin/blog/index.html.twig', ['posts' => $authorPosts]);
     }
     /**


23) /usr/src/myapp/src/Controller/Admin/BlogController.php:56    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     #[Route('/', methods: ['GET'], name: 'admin_post_index')]
     public function index(PostRepository $posts) : Response
     {
-        $authorPosts = $posts->findBy(['author' => $this->getUser()], ['publishedAt' => 'DESC']);
+        $authorPosts = $posts->findBy(['author' => $this->getUser()], []);
         return $this->render('admin/blog/index.html.twig', ['posts' => $authorPosts]);
     }
     /**


24) /usr/src/myapp/src/Controller/Admin/BlogController.php:92    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($form->isSubmitted() && $form->isValid()) {
             $entityManager->persist($post);
             $entityManager->flush();
-            // Flash messages are used to notify the user about the result of the
-            // actions. They are deleted automatically from the session as soon
-            // as they are accessed.
-            // See https://symfony.com/doc/current/controller.html#flash-messages
-            $this->addFlash('success', 'post.created_successfully');
+            
             if ($form->get('saveAndCreateNew')->isClicked()) {
                 return $this->redirectToRoute('admin_post_new');
             }


25) /usr/src/myapp/src/Controller/Admin/BlogController.php:101    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             }
             return $this->redirectToRoute('admin_post_index');
         }
-        return $this->render('admin/blog/new.html.twig', ['post' => $post, 'form' => $form->createView()]);
+        return $this->render('admin/blog/new.html.twig', ['form' => $form->createView()]);
     }
     /**
      * Finds and displays a Post entity.


26) /usr/src/myapp/src/Controller/Admin/BlogController.php:115    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     #[Route('/{id<\\d+>}', methods: ['GET'], name: 'admin_post_show')]
     public function show(Post $post) : Response
     {
-        // This security check can also be performed
-        // using a PHP attribute: #[IsGranted('show', subject: 'post', message: 'Posts can only be shown to their authors.')]
-        $this->denyAccessUnlessGranted(PostVoter::SHOW, $post, 'Posts can only be shown to their authors.');
+        
         return $this->render('admin/blog/show.html.twig', ['post' => $post]);
     }
     /**


27) /usr/src/myapp/src/Controller/Admin/BlogController.php:133    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form = $this->createForm(PostType::class, $post);
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
-            $entityManager->flush();
+            
             $this->addFlash('success', 'post.updated_successfully');
             return $this->redirectToRoute('admin_post_edit', ['id' => $post->getId()]);
         }


28) /usr/src/myapp/src/Controller/Admin/BlogController.php:134    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $entityManager->flush();
-            $this->addFlash('success', 'post.updated_successfully');
+            
             return $this->redirectToRoute('admin_post_edit', ['id' => $post->getId()]);
         }
         return $this->render('admin/blog/edit.html.twig', ['post' => $post, 'form' => $form->createView()]);


29) /usr/src/myapp/src/Controller/Admin/BlogController.php:159    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if (!$this->isCsrfTokenValid('delete', $request->request->get('token'))) {
             return $this->redirectToRoute('admin_post_index');
         }
-        // Delete the tags associated with this blog post. This is done automatically
-        // by Doctrine, except for SQLite (the database used in this application)
-        // because foreign key support is not enabled by default in SQLite
-        $post->getTags()->clear();
+        
         $entityManager->remove($post);
         $entityManager->flush();
         $this->addFlash('success', 'post.deleted_successfully');


30) /usr/src/myapp/src/Controller/Admin/BlogController.php:164    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $post->getTags()->clear();
         $entityManager->remove($post);
         $entityManager->flush();
-        $this->addFlash('success', 'post.deleted_successfully');
+        
         return $this->redirectToRoute('admin_post_index');
     }
 }


31) /usr/src/myapp/src/Controller/BlogController.php:111    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $post->addComment($comment);
         $form = $this->createForm(CommentType::class, $comment);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if ($form->isSubmitted() || $form->isValid()) {
             $entityManager->persist($comment);
             $entityManager->flush();
             // When an event is dispatched, Symfony notifies it to all the listeners


32) /usr/src/myapp/src/Controller/BlogController.php:112    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form = $this->createForm(CommentType::class, $comment);
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
-            $entityManager->persist($comment);
+            
             $entityManager->flush();
             // When an event is dispatched, Symfony notifies it to all the listeners
             // and subscribers registered to it. Listeners can modify the information


33) /usr/src/myapp/src/Controller/BlogController.php:120    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($form->isSubmitted() && $form->isValid()) {
             $entityManager->persist($comment);
             $entityManager->flush();
-            // When an event is dispatched, Symfony notifies it to all the listeners
-            // and subscribers registered to it. Listeners can modify the information
-            // passed in the event and they can even modify the execution flow, so
-            // there's no guarantee that the rest of this controller will be executed.
-            // See https://symfony.com/doc/current/components/event_dispatcher.html
-            $eventDispatcher->dispatch(new CommentCreatedEvent($comment));
+            
             return $this->redirectToRoute('blog_post', ['slug' => $post->getSlug()]);
         }
         return $this->render('blog/comment_form_error.html.twig', ['post' => $post, 'form' => $form->createView()]);


34) /usr/src/myapp/src/Controller/BlogController.php:153    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public function search(Request $request, PostRepository $posts) : Response
     {
         $query = $request->query->get('q', '');
-        $limit = $request->query->get('l', 10);
+        $limit = $request->query->get('l', 9);
         if (!$request->isXmlHttpRequest()) {
             return $this->render('blog/search.html.twig', ['query' => $query]);
         }


35) /usr/src/myapp/src/Controller/BlogController.php:153    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function search(Request $request, PostRepository $posts) : Response
     {
         $query = $request->query->get('q', '');
-        $limit = $request->query->get('l', 10);
+        $limit = $request->query->get('l', 11);
         if (!$request->isXmlHttpRequest()) {
             return $this->render('blog/search.html.twig', ['query' => $query]);
         }


36) /usr/src/myapp/src/Controller/BlogController.php:164    [M] BitwiseOr

--- Original
+++ New
@@ @@
         $foundPosts = $posts->findBySearchQuery($query, $limit);
         $results = [];
         foreach ($foundPosts as $post) {
-            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT | \ENT_HTML5), 'date' => $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT | \ENT_HTML5), 'summary' => htmlspecialchars($post->getSummary(), \ENT_COMPAT | \ENT_HTML5), 'url' => $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
+            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT & \ENT_HTML5), 'date' => $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT | \ENT_HTML5), 'summary' => htmlspecialchars($post->getSummary(), \ENT_COMPAT | \ENT_HTML5), 'url' => $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
         }
         return $this->json($results);
     }
 }


37) /usr/src/myapp/src/Controller/BlogController.php:165    [M] ArrayItem

--- Original
+++ New
@@ @@
         $foundPosts = $posts->findBySearchQuery($query, $limit);
         $results = [];
         foreach ($foundPosts as $post) {
-            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT | \ENT_HTML5), 'date' => $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT | \ENT_HTML5), 'summary' => htmlspecialchars($post->getSummary(), \ENT_COMPAT | \ENT_HTML5), 'url' => $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
+            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT | \ENT_HTML5), 'date' > $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT | \ENT_HTML5), 'summary' => htmlspecialchars($post->getSummary(), \ENT_COMPAT | \ENT_HTML5), 'url' => $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
         }
         return $this->json($results);
     }
 }


38) /usr/src/myapp/src/Controller/BlogController.php:166    [M] BitwiseOr

--- Original
+++ New
@@ @@
         $foundPosts = $posts->findBySearchQuery($query, $limit);
         $results = [];
         foreach ($foundPosts as $post) {
-            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT | \ENT_HTML5), 'date' => $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT | \ENT_HTML5), 'summary' => htmlspecialchars($post->getSummary(), \ENT_COMPAT | \ENT_HTML5), 'url' => $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
+            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT | \ENT_HTML5), 'date' => $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT & \ENT_HTML5), 'summary' => htmlspecialchars($post->getSummary(), \ENT_COMPAT | \ENT_HTML5), 'url' => $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
         }
         return $this->json($results);
     }
 }


39) /usr/src/myapp/src/Controller/BlogController.php:167    [M] BitwiseOr

--- Original
+++ New
@@ @@
         $foundPosts = $posts->findBySearchQuery($query, $limit);
         $results = [];
         foreach ($foundPosts as $post) {
-            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT | \ENT_HTML5), 'date' => $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT | \ENT_HTML5), 'summary' => htmlspecialchars($post->getSummary(), \ENT_COMPAT | \ENT_HTML5), 'url' => $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
+            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT | \ENT_HTML5), 'date' => $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT | \ENT_HTML5), 'summary' => htmlspecialchars($post->getSummary(), \ENT_COMPAT & \ENT_HTML5), 'url' => $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
         }
         return $this->json($results);
     }
 }


40) /usr/src/myapp/src/Controller/BlogController.php:167    [M] ArrayItem

--- Original
+++ New
@@ @@
         $foundPosts = $posts->findBySearchQuery($query, $limit);
         $results = [];
         foreach ($foundPosts as $post) {
-            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT | \ENT_HTML5), 'date' => $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT | \ENT_HTML5), 'summary' => htmlspecialchars($post->getSummary(), \ENT_COMPAT | \ENT_HTML5), 'url' => $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
+            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT | \ENT_HTML5), 'date' => $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT | \ENT_HTML5), 'summary' > htmlspecialchars($post->getSummary(), \ENT_COMPAT | \ENT_HTML5), 'url' => $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
         }
         return $this->json($results);
     }
 }


41) /usr/src/myapp/src/Controller/BlogController.php:168    [M] ArrayItem

--- Original
+++ New
@@ @@
         $foundPosts = $posts->findBySearchQuery($query, $limit);
         $results = [];
         foreach ($foundPosts as $post) {
-            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT | \ENT_HTML5), 'date' => $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT | \ENT_HTML5), 'summary' => htmlspecialchars($post->getSummary(), \ENT_COMPAT | \ENT_HTML5), 'url' => $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
+            $results[] = ['title' => htmlspecialchars($post->getTitle(), \ENT_COMPAT | \ENT_HTML5), 'date' => $post->getPublishedAt()->format('M d, Y'), 'author' => htmlspecialchars($post->getAuthor()->getFullName(), \ENT_COMPAT | \ENT_HTML5), 'summary' => htmlspecialchars($post->getSummary(), \ENT_COMPAT | \ENT_HTML5), 'url' > $this->generateUrl('blog_post', ['slug' => $post->getSlug()])];
         }
         return $this->json($results);
     }
 }


42) /usr/src/myapp/src/Controller/SecurityController.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($this->getUser()) {
             return $this->redirectToRoute('blog_index');
         }
-        // this statement solves an edge-case: if you change the locale in the login
-        // page, after a successful login you are redirected to a page in the previous
-        // locale. This code regenerates the referrer URL whenever the login page is
-        // browsed, to ensure that its locale is always the current one.
-        $this->saveTargetPath($request->getSession(), 'main', $this->generateUrl('admin_index'));
+        
         return $this->render('security/login.html.twig', [
             // last username entered by the user (if any)
             'last_username' => $helper->getLastUsername(),


43) /usr/src/myapp/src/Controller/UserController.php:43    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $entityManager->flush();
-            $this->addFlash('success', 'user.updated_successfully');
+            
             return $this->redirectToRoute('user_edit');
         }
         return $this->render('user/edit.html.twig', ['user' => $user, 'form' => $form->createView()]);


44) /usr/src/myapp/src/Controller/UserController.php:48    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->addFlash('success', 'user.updated_successfully');
             return $this->redirectToRoute('user_edit');
         }
-        return $this->render('user/edit.html.twig', ['user' => $user, 'form' => $form->createView()]);
+        return $this->render('user/edit.html.twig', ['form' => $form->createView()]);
     }
     #[Route('/change-password', methods: ['GET', 'POST'], name: 'user_change_password')]
     public function changePassword(Request $request, UserPasswordHasherInterface $passwordHasher, EntityManagerInterface $entityManager) : Response


45) /usr/src/myapp/src/Controller/UserController.php:63    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form = $this->createForm(ChangePasswordType::class);
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
-            $user->setPassword($passwordHasher->hashPassword($user, $form->get('newPassword')->getData()));
+            
             $entityManager->flush();
             return $this->redirectToRoute('security_logout');
         }


46) /usr/src/myapp/src/Controller/UserController.php:64    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $user->setPassword($passwordHasher->hashPassword($user, $form->get('newPassword')->getData()));
-            $entityManager->flush();
+            
             return $this->redirectToRoute('security_logout');
         }
         return $this->render('user/change_password.html.twig', ['form' => $form->createView()]);
     }
 }


47) /usr/src/myapp/src/Entity/Comment.php:58    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->publishedAt = new \DateTime();
     }
-    #[Assert\IsTrue(message: 'comment.is_spam')]
-    public function isLegitComment() : bool
+    protected function isLegitComment() : bool
     {
         $containsInvalidCharacters = null !== u($this->content)->indexOf('@');
         return !$containsInvalidCharacters;


48) /usr/src/myapp/src/Entity/Post.php:153    [M] LogicalNot

--- Original
+++ New
@@ @@
     public function addComment(Comment $comment) : void
     {
         $comment->setPost($this);
-        if (!$this->comments->contains($comment)) {
+        if ($this->comments->contains($comment)) {
             $this->comments->add($comment);
         }
     }


49) /usr/src/myapp/src/Entity/Post.php:154    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $comment->setPost($this);
         if (!$this->comments->contains($comment)) {
-            $this->comments->add($comment);
+            
         }
     }
     public function removeComment(Comment $comment) : void


50) /usr/src/myapp/src/Entity/User.php:120    [M] UnwrapArrayUnique

--- Original
+++ New
@@ @@
         if (empty($roles)) {
             $roles[] = 'ROLE_USER';
         }
-        return array_unique($roles);
+        return $roles;
     }
     public function setRoles(array $roles) : void
     {


51) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:82    [M] InstanceOf_

--- Original
+++ New
@@ @@
         // in a Twig_Error_Runtime, we must get the original exception.
         $previousException = $exception->getPrevious();
         // Driver exception may happen in controller or in twig template rendering
-        $isDriverException = $exception instanceof DriverException || $previousException instanceof DriverException;
+        $isDriverException = true || $previousException instanceof DriverException;
         // Check if SQLite is enabled
         if ($isDriverException && $this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
             $event->setThrowable(new \Exception('PHP extension "sqlite3" must be enabled because, by default, the Symfony Demo application uses SQLite to store its information.'));


52) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:82    [M] InstanceOf_

--- Original
+++ New
@@ @@
         // in a Twig_Error_Runtime, we must get the original exception.
         $previousException = $exception->getPrevious();
         // Driver exception may happen in controller or in twig template rendering
-        $isDriverException = $exception instanceof DriverException || $previousException instanceof DriverException;
+        $isDriverException = false || $previousException instanceof DriverException;
         // Check if SQLite is enabled
         if ($isDriverException && $this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
             $event->setThrowable(new \Exception('PHP extension "sqlite3" must be enabled because, by default, the Symfony Demo application uses SQLite to store its information.'));


53) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:82    [M] InstanceOf_

--- Original
+++ New
@@ @@
         // in a Twig_Error_Runtime, we must get the original exception.
         $previousException = $exception->getPrevious();
         // Driver exception may happen in controller or in twig template rendering
-        $isDriverException = $exception instanceof DriverException || $previousException instanceof DriverException;
+        $isDriverException = $exception instanceof DriverException || true;
         // Check if SQLite is enabled
         if ($isDriverException && $this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
             $event->setThrowable(new \Exception('PHP extension "sqlite3" must be enabled because, by default, the Symfony Demo application uses SQLite to store its information.'));


54) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:82    [M] InstanceOf_

--- Original
+++ New
@@ @@
         // in a Twig_Error_Runtime, we must get the original exception.
         $previousException = $exception->getPrevious();
         // Driver exception may happen in controller or in twig template rendering
-        $isDriverException = $exception instanceof DriverException || $previousException instanceof DriverException;
+        $isDriverException = $exception instanceof DriverException || false;
         // Check if SQLite is enabled
         if ($isDriverException && $this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
             $event->setThrowable(new \Exception('PHP extension "sqlite3" must be enabled because, by default, the Symfony Demo application uses SQLite to store its information.'));


55) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:82    [M] LogicalOr

--- Original
+++ New
@@ @@
         // in a Twig_Error_Runtime, we must get the original exception.
         $previousException = $exception->getPrevious();
         // Driver exception may happen in controller or in twig template rendering
-        $isDriverException = $exception instanceof DriverException || $previousException instanceof DriverException;
+        $isDriverException = $exception instanceof DriverException && $previousException instanceof DriverException;
         // Check if SQLite is enabled
         if ($isDriverException && $this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
             $event->setThrowable(new \Exception('PHP extension "sqlite3" must be enabled because, by default, the Symfony Demo application uses SQLite to store its information.'));


56) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:85    [M] LogicalAnd

--- Original
+++ New
@@ @@
         // Driver exception may happen in controller or in twig template rendering
         $isDriverException = $exception instanceof DriverException || $previousException instanceof DriverException;
         // Check if SQLite is enabled
-        if ($isDriverException && $this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
+        if (($isDriverException || $this->isSQLitePlatform()) && !\extension_loaded('sqlite3')) {
             $event->setThrowable(new \Exception('PHP extension "sqlite3" must be enabled because, by default, the Symfony Demo application uses SQLite to store its information.'));
         }
     }


57) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:85    [M] LogicalNot

--- Original
+++ New
@@ @@
         // Driver exception may happen in controller or in twig template rendering
         $isDriverException = $exception instanceof DriverException || $previousException instanceof DriverException;
         // Check if SQLite is enabled
-        if ($isDriverException && $this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
+        if ($isDriverException && $this->isSQLitePlatform() && \extension_loaded('sqlite3')) {
             $event->setThrowable(new \Exception('PHP extension "sqlite3" must be enabled because, by default, the Symfony Demo application uses SQLite to store its information.'));
         }
     }


58) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:85    [M] LogicalAnd

--- Original
+++ New
@@ @@
         // Driver exception may happen in controller or in twig template rendering
         $isDriverException = $exception instanceof DriverException || $previousException instanceof DriverException;
         // Check if SQLite is enabled
-        if ($isDriverException && $this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
+        if ($isDriverException && $this->isSQLitePlatform() || !\extension_loaded('sqlite3')) {
             $event->setThrowable(new \Exception('PHP extension "sqlite3" must be enabled because, by default, the Symfony Demo application uses SQLite to store its information.'));
         }
     }


59) /usr/src/myapp/src/EventSubscriber/CommentNotificationSubscriber.php:50    [M] Concat

--- Original
+++ New
@@ @@
     {
         $comment = $event->getComment();
         $post = $comment->getPost();
-        $linkToPost = $this->urlGenerator->generate('blog_post', ['slug' => $post->getSlug(), '_fragment' => 'comment_' . $comment->getId()], UrlGeneratorInterface::ABSOLUTE_URL);
+        $linkToPost = $this->urlGenerator->generate('blog_post', ['slug' => $post->getSlug(), '_fragment' => $comment->getId() . 'comment_'], UrlGeneratorInterface::ABSOLUTE_URL);
         $subject = $this->translator->trans('notification.comment_created');
         $body = $this->translator->trans('notification.comment_created.description', ['title' => $post->getTitle(), 'link' => $linkToPost]);
         // See https://symfony.com/doc/current/mailer.html


60) /usr/src/myapp/src/EventSubscriber/CommentNotificationSubscriber.php:50    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         $comment = $event->getComment();
         $post = $comment->getPost();
-        $linkToPost = $this->urlGenerator->generate('blog_post', ['slug' => $post->getSlug(), '_fragment' => 'comment_' . $comment->getId()], UrlGeneratorInterface::ABSOLUTE_URL);
+        $linkToPost = $this->urlGenerator->generate('blog_post', ['slug' => $post->getSlug(), '_fragment' => $comment->getId()], UrlGeneratorInterface::ABSOLUTE_URL);
         $subject = $this->translator->trans('notification.comment_created');
         $body = $this->translator->trans('notification.comment_created.description', ['title' => $post->getTitle(), 'link' => $linkToPost]);
         // See https://symfony.com/doc/current/mailer.html


61) /usr/src/myapp/src/EventSubscriber/CommentNotificationSubscriber.php:50    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         $comment = $event->getComment();
         $post = $comment->getPost();
-        $linkToPost = $this->urlGenerator->generate('blog_post', ['slug' => $post->getSlug(), '_fragment' => 'comment_' . $comment->getId()], UrlGeneratorInterface::ABSOLUTE_URL);
+        $linkToPost = $this->urlGenerator->generate('blog_post', ['slug' => $post->getSlug(), '_fragment' => 'comment_'], UrlGeneratorInterface::ABSOLUTE_URL);
         $subject = $this->translator->trans('notification.comment_created');
         $body = $this->translator->trans('notification.comment_created.description', ['title' => $post->getTitle(), 'link' => $linkToPost]);
         // See https://symfony.com/doc/current/mailer.html


62) /usr/src/myapp/src/EventSubscriber/CommentNotificationSubscriber.php:54    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $post = $comment->getPost();
         $linkToPost = $this->urlGenerator->generate('blog_post', ['slug' => $post->getSlug(), '_fragment' => 'comment_' . $comment->getId()], UrlGeneratorInterface::ABSOLUTE_URL);
         $subject = $this->translator->trans('notification.comment_created');
-        $body = $this->translator->trans('notification.comment_created.description', ['title' => $post->getTitle(), 'link' => $linkToPost]);
+        $body = $this->translator->trans('notification.comment_created.description', ['link' => $linkToPost]);
         // See https://symfony.com/doc/current/mailer.html
         $email = (new Email())->from($this->sender)->to($post->getAuthor()->getEmail())->subject($subject)->html($body);
         // In config/packages/dev/mailer.yaml the delivery of messages is disabled.


63) /usr/src/myapp/src/EventSubscriber/CommentNotificationSubscriber.php:55    [M] ArrayItem

--- Original
+++ New
@@ @@
         $post = $comment->getPost();
         $linkToPost = $this->urlGenerator->generate('blog_post', ['slug' => $post->getSlug(), '_fragment' => 'comment_' . $comment->getId()], UrlGeneratorInterface::ABSOLUTE_URL);
         $subject = $this->translator->trans('notification.comment_created');
-        $body = $this->translator->trans('notification.comment_created.description', ['title' => $post->getTitle(), 'link' => $linkToPost]);
+        $body = $this->translator->trans('notification.comment_created.description', ['title' > $post->getTitle(), 'link' => $linkToPost]);
         // See https://symfony.com/doc/current/mailer.html
         $email = (new Email())->from($this->sender)->to($post->getAuthor()->getEmail())->subject($subject)->html($body);
         // In config/packages/dev/mailer.yaml the delivery of messages is disabled.


64) /usr/src/myapp/src/EventSubscriber/CommentNotificationSubscriber.php:70    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $body = $this->translator->trans('notification.comment_created.description', ['title' => $post->getTitle(), 'link' => $linkToPost]);
         // See https://symfony.com/doc/current/mailer.html
         $email = (new Email())->from($this->sender)->to($post->getAuthor()->getEmail())->subject($subject)->html($body);
-        // In config/packages/dev/mailer.yaml the delivery of messages is disabled.
-        // That's why in the development environment you won't actually receive any email.
-        // However, you can inspect the contents of those unsent emails using the debug toolbar.
-        $this->mailer->send($email);
+        
     }
 }


65) /usr/src/myapp/src/EventSubscriber/ControllerSubscriber.php:46    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         // number of sub-requests. See
         // https://symfony.com/doc/current/components/http_kernel.html#sub-requests
         if ($event->isMainRequest()) {
-            $this->twigExtension->setController($event->getController());
+            
         }
     }
 }


66) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:39    [M] UnwrapTrim

--- Original
+++ New
@@ @@
     private string $defaultLocale;
     public function __construct(private UrlGeneratorInterface $urlGenerator, string $locales, ?string $defaultLocale = null)
     {
-        $this->locales = explode('|', trim($locales));
+        $this->locales = explode('|', $locales);
         if (empty($this->locales)) {
             throw new \UnexpectedValueException('The list of supported locales must not be empty.');
         }


67) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:44    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if (empty($this->locales)) {
             throw new \UnexpectedValueException('The list of supported locales must not be empty.');
         }
-        $this->defaultLocale = $defaultLocale ?: $this->locales[0];
+        $this->defaultLocale = $defaultLocale ?: $this->locales[1];
         if (!\in_array($this->defaultLocale, $this->locales, true)) {
             throw new \UnexpectedValueException(sprintf('The default locale ("%s") must be one of "%s".', $this->defaultLocale, $locales));
         }


68) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:53    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         if (!\in_array($this->defaultLocale, $this->locales, true)) {
             throw new \UnexpectedValueException(sprintf('The default locale ("%s") must be one of "%s".', $this->defaultLocale, $locales));
         }
-        // Add the default locale at the first position of the array,
-        // because Symfony\HttpFoundation\Request::getPreferredLanguage
-        // returns the first element when no an appropriate language is found
-        array_unshift($this->locales, $this->defaultLocale);
+        
         $this->locales = array_unique($this->locales);
     }
     public static function getSubscribedEvents() : array


69) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:54    [M] UnwrapArrayUnique

--- Original
+++ New
@@ @@
         // because Symfony\HttpFoundation\Request::getPreferredLanguage
         // returns the first element when no an appropriate language is found
         array_unshift($this->locales, $this->defaultLocale);
-        $this->locales = array_unique($this->locales);
+        $this->locales = $this->locales;
     }
     public static function getSubscribedEvents() : array
     {


70) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:69    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
         $request = $event->getRequest();
         // Ignore sub-requests and all URLs but the homepage
-        if (!$event->isMainRequest() || '/' !== $request->getPathInfo()) {
+        if ($event->isMainRequest() || '/' !== $request->getPathInfo()) {
             return;
         }
         // Ignore requests from referrers with the same HTTP host in order to prevent


71) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:69    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
         $request = $event->getRequest();
         // Ignore sub-requests and all URLs but the homepage
-        if (!$event->isMainRequest() || '/' !== $request->getPathInfo()) {
+        if (!$event->isMainRequest() || '/' === $request->getPathInfo()) {
             return;
         }
         // Ignore requests from referrers with the same HTTP host in order to prevent


72) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:69    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
         $request = $event->getRequest();
         // Ignore sub-requests and all URLs but the homepage
-        if (!$event->isMainRequest() || '/' !== $request->getPathInfo()) {
+        if (!$event->isMainRequest() && '/' !== $request->getPathInfo()) {
             return;
         }
         // Ignore requests from referrers with the same HTTP host in order to prevent


73) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:75    [M] NotIdentical

--- Original
+++ New
@@ @@
         // Ignore requests from referrers with the same HTTP host in order to prevent
         // changing language for users who possibly already selected it for this application.
         $referrer = $request->headers->get('referer');
-        if (null !== $referrer && u($referrer)->ignoreCase()->startsWith($request->getSchemeAndHttpHost())) {
+        if (null === $referrer && u($referrer)->ignoreCase()->startsWith($request->getSchemeAndHttpHost())) {
             return;
         }
         $preferredLanguage = $request->getPreferredLanguage($this->locales);


74) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:75    [M] LogicalAnd

--- Original
+++ New
@@ @@
         // Ignore requests from referrers with the same HTTP host in order to prevent
         // changing language for users who possibly already selected it for this application.
         $referrer = $request->headers->get('referer');
-        if (null !== $referrer && u($referrer)->ignoreCase()->startsWith($request->getSchemeAndHttpHost())) {
+        if (null !== $referrer || u($referrer)->ignoreCase()->startsWith($request->getSchemeAndHttpHost())) {
             return;
         }
         $preferredLanguage = $request->getPreferredLanguage($this->locales);


75) /usr/src/myapp/src/Form/CommentType.php:44    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('content', null, ['required' => false]);
-        $builder->add('content', TextareaType::class, ['help' => 'help.comment_content']);
+        $builder->add('content', TextareaType::class, []);
     }
     /**
      * {@inheritdoc}


76) /usr/src/myapp/src/Form/CommentType.php:55    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver) : void
     {
-        $resolver->setDefaults(['data_class' => Comment::class]);
+        $resolver->setDefaults([]);
     }
 }


77) /usr/src/myapp/src/Form/CommentType.php:55    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver) : void
     {
-        $resolver->setDefaults(['data_class' => Comment::class]);
+        
     }
 }


78) /usr/src/myapp/src/Form/DataTransformer/TagArrayToStringTransformer.php:53    [M] LogicalOr

--- Original
+++ New
@@ @@
      */
     public function reverseTransform($string) : array
     {
-        if (null === $string || u($string)->isEmpty()) {
+        if (null === $string && u($string)->isEmpty()) {
             return [];
         }
         $names = array_filter(array_unique(array_map('trim', u($string)->split(','))));


79) /usr/src/myapp/src/Form/PostType.php:55    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
+        $builder->add('title', null, ['label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
             if (null === $post->getSlug() && null !== $post->getTitle()) {


80) /usr/src/myapp/src/Form/PostType.php:56    [M] TrueValue

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
+        $builder->add('title', null, ['attr' => ['autofocus' => false], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
             if (null === $post->getSlug() && null !== $post->getTitle()) {


81) /usr/src/myapp/src/Form/PostType.php:56    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
+        $builder->add('title', null, ['attr' => [], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
             if (null === $post->getSlug() && null !== $post->getTitle()) {


82) /usr/src/myapp/src/Form/PostType.php:59    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
+        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
             if (null === $post->getSlug() && null !== $post->getTitle()) {


83) /usr/src/myapp/src/Form/PostType.php:63    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
+        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
             if (null === $post->getSlug() && null !== $post->getTitle()) {


84) /usr/src/myapp/src/Form/PostType.php:64    [M] DecrementInteger

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
+        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 19], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
             if (null === $post->getSlug() && null !== $post->getTitle()) {


85) /usr/src/myapp/src/Form/PostType.php:64    [M] IncrementInteger

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
+        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 21], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
             if (null === $post->getSlug() && null !== $post->getTitle()) {


86) /usr/src/myapp/src/Form/PostType.php:64    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
+        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => [], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
             if (null === $post->getSlug() && null !== $post->getTitle()) {


87) /usr/src/myapp/src/Form/PostType.php:68    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
+        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
             if (null === $post->getSlug() && null !== $post->getTitle()) {


88) /usr/src/myapp/src/Form/PostType.php:72    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
+        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
             if (null === $post->getSlug() && null !== $post->getTitle()) {


89) /usr/src/myapp/src/Form/PostType.php:74    [M] FalseValue

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
+        $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => true])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
             if (null === $post->getSlug() && null !== $post->getTitle()) {


90) /usr/src/myapp/src/Form/PostType.php:82    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $builder->add('title', null, ['attr' => ['autofocus' => true], 'label' => 'label.title'])->add('summary', TextareaType::class, ['help' => 'help.post_summary', 'label' => 'label.summary'])->add('content', null, ['attr' => ['rows' => 20], 'help' => 'help.post_content', 'label' => 'label.content'])->add('publishedAt', DateTimePickerType::class, ['label' => 'label.published_at', 'help' => 'help.post_publication'])->add('tags', TagsInputType::class, ['label' => 'label.tags', 'required' => false])->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
             /** @var Post */
             $post = $event->getData();
-            if (null === $post->getSlug() && null !== $post->getTitle()) {
+            if (null === $post->getSlug() || null !== $post->getTitle()) {
                 $post->setSlug($this->slugger->slug($post->getTitle())->lower());
             }
         });


91) /usr/src/myapp/src/Form/PostType.php:94    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver) : void
     {
-        $resolver->setDefaults(['data_class' => Post::class]);
+        $resolver->setDefaults([]);
     }
 }


92) /usr/src/myapp/src/Form/PostType.php:94    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver) : void
     {
-        $resolver->setDefaults(['data_class' => Post::class]);
+        
     }
 }


93) /usr/src/myapp/src/Form/Type/ChangePasswordType.php:35    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
+        $builder->add('currentPassword', PasswordType::class, ['label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
     }
 }


94) /usr/src/myapp/src/Form/Type/ChangePasswordType.php:36    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
+        $builder->add('currentPassword', PasswordType::class, ['constraints' => [], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
     }
 }


95) /usr/src/myapp/src/Form/Type/ChangePasswordType.php:40    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
+        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => []])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
     }
 }


96) /usr/src/myapp/src/Form/Type/ChangePasswordType.php:44    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
+        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
     }
 }


97) /usr/src/myapp/src/Form/Type/ChangePasswordType.php:46    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
+        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
     }
 }


98) /usr/src/myapp/src/Form/Type/ChangePasswordType.php:49    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
+        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 4, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
     }
 }


99) /usr/src/myapp/src/Form/Type/ChangePasswordType.php:49    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
+        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 6, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
     }
 }


100) /usr/src/myapp/src/Form/Type/ChangePasswordType.php:50    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
+        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 127)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
     }
 }


101) /usr/src/myapp/src/Form/Type/ChangePasswordType.php:50    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
+        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 129)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
     }
 }


102) /usr/src/myapp/src/Form/Type/ChangePasswordType.php:53    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
+        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => [], 'second_options' => ['label' => 'label.new_password_confirm']]);
     }
 }


103) /usr/src/myapp/src/Form/Type/ChangePasswordType.php:56    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => ['label' => 'label.new_password_confirm']]);
+        $builder->add('currentPassword', PasswordType::class, ['constraints' => [new UserPassword()], 'label' => 'label.current_password', 'attr' => ['autocomplete' => 'off']])->add('newPassword', RepeatedType::class, ['type' => PasswordType::class, 'constraints' => [new NotBlank(), new Length(min: 5, max: 128)], 'first_options' => ['label' => 'label.new_password'], 'second_options' => []]);
     }
 }


104) /usr/src/myapp/src/Form/Type/DateTimePickerType.php:51    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function configureOptions(OptionsResolver $resolver) : void
     {
         $resolver->setDefaults([
-            'widget' => 'single_text',
             // if true, the browser will display the native date picker widget
             // however, this app uses a custom JavaScript widget, so it must be set to false
             'html5' => false,


105) /usr/src/myapp/src/Form/Type/DateTimePickerType.php:51    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver) : void
     {
-        $resolver->setDefaults([
-            'widget' => 'single_text',
-            // if true, the browser will display the native date picker widget
-            // however, this app uses a custom JavaScript widget, so it must be set to false
-            'html5' => false,
-        ]);
+        
     }
     /**
      * {@inheritdoc}


106) /usr/src/myapp/src/Form/Type/DateTimePickerType.php:55    [M] FalseValue

--- Original
+++ New
@@ @@
             'widget' => 'single_text',
             // if true, the browser will display the native date picker widget
             // however, this app uses a custom JavaScript widget, so it must be set to false
-            'html5' => false,
+            'html5' => true,
         ]);
     }
     /**


107) /usr/src/myapp/src/Form/Type/TagsInputType.php:48    [M] TrueValue

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options) : void
     {
-        $builder->addModelTransformer(new CollectionToArrayTransformer(), true)->addModelTransformer(new TagArrayToStringTransformer($this->tags), true);
+        $builder->addModelTransformer(new CollectionToArrayTransformer(), false)->addModelTransformer(new TagArrayToStringTransformer($this->tags), true);
     }
     /**
      * {@inheritdoc}


108) /usr/src/myapp/src/Form/UserType.php:43    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('username', TextType::class, ['label' => 'label.username', 'disabled' => true])->add('fullName', TextType::class, ['label' => 'label.fullname'])->add('email', EmailType::class, ['label' => 'label.email']);
+        $builder->add('username', TextType::class, ['disabled' => true])->add('fullName', TextType::class, ['label' => 'label.fullname'])->add('email', EmailType::class, ['label' => 'label.email']);
     }
     /**
      * {@inheritdoc}


109) /usr/src/myapp/src/Form/UserType.php:45    [M] TrueValue

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('username', TextType::class, ['label' => 'label.username', 'disabled' => true])->add('fullName', TextType::class, ['label' => 'label.fullname'])->add('email', EmailType::class, ['label' => 'label.email']);
+        $builder->add('username', TextType::class, ['label' => 'label.username', 'disabled' => false])->add('fullName', TextType::class, ['label' => 'label.fullname'])->add('email', EmailType::class, ['label' => 'label.email']);
     }
     /**
      * {@inheritdoc}


110) /usr/src/myapp/src/Form/UserType.php:47    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('username', TextType::class, ['label' => 'label.username', 'disabled' => true])->add('fullName', TextType::class, ['label' => 'label.fullname'])->add('email', EmailType::class, ['label' => 'label.email']);
+        $builder->add('username', TextType::class, ['label' => 'label.username', 'disabled' => true])->add('fullName', TextType::class, [])->add('email', EmailType::class, ['label' => 'label.email']);
     }
     /**
      * {@inheritdoc}


111) /usr/src/myapp/src/Form/UserType.php:50    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // server-side validation errors from the browser. To temporarily disable
         // this validation, set the 'required' attribute to 'false':
         // $builder->add('title', null, ['required' => false, ...]);
-        $builder->add('username', TextType::class, ['label' => 'label.username', 'disabled' => true])->add('fullName', TextType::class, ['label' => 'label.fullname'])->add('email', EmailType::class, ['label' => 'label.email']);
+        $builder->add('username', TextType::class, ['label' => 'label.username', 'disabled' => true])->add('fullName', TextType::class, ['label' => 'label.fullname'])->add('email', EmailType::class, []);
     }
     /**
      * {@inheritdoc}


112) /usr/src/myapp/src/Form/UserType.php:61    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver) : void
     {
-        $resolver->setDefaults(['data_class' => User::class]);
+        $resolver->setDefaults([]);
     }
 }


113) /usr/src/myapp/src/Form/UserType.php:61    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver) : void
     {
-        $resolver->setDefaults(['data_class' => User::class]);
+        
     }
 }


114) /usr/src/myapp/src/Pagination/Paginator.php:41    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public function __construct(private DoctrineQueryBuilder $queryBuilder, private int $pageSize = self::PAGE_SIZE)
     {
     }
-    public function paginate(int $page = 1) : self
+    public function paginate(int $page = 0) : self
     {
         $this->currentPage = max(1, $page);
         $firstResult = ($this->currentPage - 1) * $this->pageSize;


115) /usr/src/myapp/src/Pagination/Paginator.php:41    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function __construct(private DoctrineQueryBuilder $queryBuilder, private int $pageSize = self::PAGE_SIZE)
     {
     }
-    public function paginate(int $page = 1) : self
+    public function paginate(int $page = 2) : self
     {
         $this->currentPage = max(1, $page);
         $firstResult = ($this->currentPage - 1) * $this->pageSize;


116) /usr/src/myapp/src/Pagination/Paginator.php:43    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public function paginate(int $page = 1) : self
     {
-        $this->currentPage = max(1, $page);
+        $this->currentPage = max(0, $page);
         $firstResult = ($this->currentPage - 1) * $this->pageSize;
         $query = $this->queryBuilder->setFirstResult($firstResult)->setMaxResults($this->pageSize)->getQuery();
         if (0 === \count($this->queryBuilder->getDQLPart('join'))) {


117) /usr/src/myapp/src/Pagination/Paginator.php:43    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public function paginate(int $page = 1) : self
     {
-        $this->currentPage = max(1, $page);
+        $this->currentPage = max(2, $page);
         $firstResult = ($this->currentPage - 1) * $this->pageSize;
         $query = $this->queryBuilder->setFirstResult($firstResult)->setMaxResults($this->pageSize)->getQuery();
         if (0 === \count($this->queryBuilder->getDQLPart('join'))) {


118) /usr/src/myapp/src/Pagination/Paginator.php:44    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public function paginate(int $page = 1) : self
     {
         $this->currentPage = max(1, $page);
-        $firstResult = ($this->currentPage - 1) * $this->pageSize;
+        $firstResult = ($this->currentPage - 0) * $this->pageSize;
         $query = $this->queryBuilder->setFirstResult($firstResult)->setMaxResults($this->pageSize)->getQuery();
         if (0 === \count($this->queryBuilder->getDQLPart('join'))) {
             $query->setHint(CountWalker::HINT_DISTINCT, false);


119) /usr/src/myapp/src/Pagination/Paginator.php:44    [M] Minus

--- Original
+++ New
@@ @@
     public function paginate(int $page = 1) : self
     {
         $this->currentPage = max(1, $page);
-        $firstResult = ($this->currentPage - 1) * $this->pageSize;
+        $firstResult = ($this->currentPage + 1) * $this->pageSize;
         $query = $this->queryBuilder->setFirstResult($firstResult)->setMaxResults($this->pageSize)->getQuery();
         if (0 === \count($this->queryBuilder->getDQLPart('join'))) {
             $query->setHint(CountWalker::HINT_DISTINCT, false);


120) /usr/src/myapp/src/Pagination/Paginator.php:44    [M] Multiplication

--- Original
+++ New
@@ @@
     public function paginate(int $page = 1) : self
     {
         $this->currentPage = max(1, $page);
-        $firstResult = ($this->currentPage - 1) * $this->pageSize;
+        $firstResult = ($this->currentPage - 1) / $this->pageSize;
         $query = $this->queryBuilder->setFirstResult($firstResult)->setMaxResults($this->pageSize)->getQuery();
         if (0 === \count($this->queryBuilder->getDQLPart('join'))) {
             $query->setHint(CountWalker::HINT_DISTINCT, false);


121) /usr/src/myapp/src/Pagination/Paginator.php:51    [M] Identical

--- Original
+++ New
@@ @@
         $this->currentPage = max(1, $page);
         $firstResult = ($this->currentPage - 1) * $this->pageSize;
         $query = $this->queryBuilder->setFirstResult($firstResult)->setMaxResults($this->pageSize)->getQuery();
-        if (0 === \count($this->queryBuilder->getDQLPart('join'))) {
+        if (0 !== \count($this->queryBuilder->getDQLPart('join'))) {
             $query->setHint(CountWalker::HINT_DISTINCT, false);
         }
         $paginator = new DoctrinePaginator($query, true);


122) /usr/src/myapp/src/Pagination/Paginator.php:57    [M] GreaterThan

--- Original
+++ New
@@ @@
             $query->setHint(CountWalker::HINT_DISTINCT, false);
         }
         $paginator = new DoctrinePaginator($query, true);
-        $useOutputWalkers = \count($this->queryBuilder->getDQLPart('having') ?: []) > 0;
+        $useOutputWalkers = \count($this->queryBuilder->getDQLPart('having') ?: []) >= 0;
         $paginator->setUseOutputWalkers($useOutputWalkers);
         $this->results = $paginator->getIterator();
         $this->numResults = $paginator->count();


123) /usr/src/myapp/src/Pagination/Paginator.php:57    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
             $query->setHint(CountWalker::HINT_DISTINCT, false);
         }
         $paginator = new DoctrinePaginator($query, true);
-        $useOutputWalkers = \count($this->queryBuilder->getDQLPart('having') ?: []) > 0;
+        $useOutputWalkers = \count($this->queryBuilder->getDQLPart('having') ?: []) <= 0;
         $paginator->setUseOutputWalkers($useOutputWalkers);
         $this->results = $paginator->getIterator();
         $this->numResults = $paginator->count();


124) /usr/src/myapp/src/Pagination/Paginator.php:58    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $paginator = new DoctrinePaginator($query, true);
         $useOutputWalkers = \count($this->queryBuilder->getDQLPart('having') ?: []) > 0;
-        $paginator->setUseOutputWalkers($useOutputWalkers);
+        
         $this->results = $paginator->getIterator();
         $this->numResults = $paginator->count();
         return $this;


125) /usr/src/myapp/src/Pagination/Paginator.php:73    [M] Division

--- Original
+++ New
@@ @@
     }
     public function getLastPage() : int
     {
-        return (int) ceil($this->numResults / $this->pageSize);
+        return (int) ceil($this->numResults * $this->pageSize);
     }
     public function getPageSize() : int
     {


126) /usr/src/myapp/src/Pagination/Paginator.php:73    [M] RoundingFamily

--- Original
+++ New
@@ @@
     }
     public function getLastPage() : int
     {
-        return (int) ceil($this->numResults / $this->pageSize);
+        return (int) floor($this->numResults / $this->pageSize);
     }
     public function getPageSize() : int
     {


127) /usr/src/myapp/src/Pagination/Paginator.php:73    [M] RoundingFamily

--- Original
+++ New
@@ @@
     }
     public function getLastPage() : int
     {
-        return (int) ceil($this->numResults / $this->pageSize);
+        return (int) round($this->numResults / $this->pageSize);
     }
     public function getPageSize() : int
     {


128) /usr/src/myapp/src/Pagination/Paginator.php:73    [M] CastInt

--- Original
+++ New
@@ @@
     }
     public function getLastPage() : int
     {
-        return (int) ceil($this->numResults / $this->pageSize);
+        return ceil($this->numResults / $this->pageSize);
     }
     public function getPageSize() : int
     {


129) /usr/src/myapp/src/Pagination/Paginator.php:83    [M] GreaterThan

--- Original
+++ New
@@ @@
     }
     public function hasPreviousPage() : bool
     {
-        return $this->currentPage > 1;
+        return $this->currentPage >= 1;
     }
     public function getPreviousPage() : int
     {


130) /usr/src/myapp/src/Pagination/Paginator.php:83    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
     }
     public function hasPreviousPage() : bool
     {
-        return $this->currentPage > 1;
+        return $this->currentPage <= 1;
     }
     public function getPreviousPage() : int
     {


131) /usr/src/myapp/src/Pagination/Paginator.php:93    [M] LessThan

--- Original
+++ New
@@ @@
     }
     public function hasNextPage() : bool
     {
-        return $this->currentPage < $this->getLastPage();
+        return $this->currentPage <= $this->getLastPage();
     }
     public function getNextPage() : int
     {


132) /usr/src/myapp/src/Pagination/Paginator.php:93    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
     }
     public function hasNextPage() : bool
     {
-        return $this->currentPage < $this->getLastPage();
+        return $this->currentPage >= $this->getLastPage();
     }
     public function getNextPage() : int
     {


133) /usr/src/myapp/src/Pagination/Paginator.php:96    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->currentPage < $this->getLastPage();
     }
-    public function getNextPage() : int
+    protected function getNextPage() : int
     {
         return min($this->getLastPage(), $this->currentPage + 1);
     }


134) /usr/src/myapp/src/Pagination/Paginator.php:98    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public function getNextPage() : int
     {
-        return min($this->getLastPage(), $this->currentPage + 1);
+        return min($this->getLastPage(), $this->currentPage + 0);
     }
     public function hasToPaginate() : bool
     {


135) /usr/src/myapp/src/Pagination/Paginator.php:98    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public function getNextPage() : int
     {
-        return min($this->getLastPage(), $this->currentPage + 1);
+        return min($this->getLastPage(), $this->currentPage + 2);
     }
     public function hasToPaginate() : bool
     {


136) /usr/src/myapp/src/Pagination/Paginator.php:103    [M] GreaterThan

--- Original
+++ New
@@ @@
     }
     public function hasToPaginate() : bool
     {
-        return $this->numResults > $this->pageSize;
+        return $this->numResults >= $this->pageSize;
     }
     public function getNumResults() : int
     {


137) /usr/src/myapp/src/Pagination/Paginator.php:103    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
     }
     public function hasToPaginate() : bool
     {
-        return $this->numResults > $this->pageSize;
+        return $this->numResults <= $this->pageSize;
     }
     public function getNumResults() : int
     {


138) /usr/src/myapp/src/Repository/PostRepository.php:38    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         parent::__construct($registry, Post::class);
     }
-    public function findLatest(int $page = 1, Tag $tag = null) : Paginator
+    public function findLatest(int $page = 0, Tag $tag = null) : Paginator
     {
         $qb = $this->createQueryBuilder('p')->addSelect('a', 't')->innerJoin('p.author', 'a')->leftJoin('p.tags', 't')->where('p.publishedAt <= :now')->orderBy('p.publishedAt', 'DESC')->setParameter('now', new \DateTime());
         if (null !== $tag) {


139) /usr/src/myapp/src/Repository/PostRepository.php:38    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         parent::__construct($registry, Post::class);
     }
-    public function findLatest(int $page = 1, Tag $tag = null) : Paginator
+    public function findLatest(int $page = 2, Tag $tag = null) : Paginator
     {
         $qb = $this->createQueryBuilder('p')->addSelect('a', 't')->innerJoin('p.author', 'a')->leftJoin('p.tags', 't')->where('p.publishedAt <= :now')->orderBy('p.publishedAt', 'DESC')->setParameter('now', new \DateTime());
         if (null !== $tag) {


140) /usr/src/myapp/src/Repository/PostRepository.php:73    [M] Concat

--- Original
+++ New
@@ @@
         }
         $queryBuilder = $this->createQueryBuilder('p');
         foreach ($searchTerms as $key => $term) {
-            $queryBuilder->orWhere('p.title LIKE :t_' . $key)->setParameter('t_' . $key, '%' . $term . '%');
+            $queryBuilder->orWhere('p.title LIKE :t_' . $key)->setParameter('t_' . $key, $term . '%' . '%');
         }
         return $queryBuilder->orderBy('p.publishedAt', 'DESC')->setMaxResults($limit)->getQuery()->getResult();
     }


141) /usr/src/myapp/src/Repository/PostRepository.php:73    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         }
         $queryBuilder = $this->createQueryBuilder('p');
         foreach ($searchTerms as $key => $term) {
-            $queryBuilder->orWhere('p.title LIKE :t_' . $key)->setParameter('t_' . $key, '%' . $term . '%');
+            $queryBuilder->orWhere('p.title LIKE :t_' . $key)->setParameter('t_' . $key, $term . '%');
         }
         return $queryBuilder->orderBy('p.publishedAt', 'DESC')->setMaxResults($limit)->getQuery()->getResult();
     }


142) /usr/src/myapp/src/Repository/PostRepository.php:90    [M] UnwrapArrayUnique

--- Original
+++ New
@@ @@
     private function extractSearchTerms(string $searchQuery) : array
     {
         $searchQuery = u($searchQuery)->replaceMatches('/[[:space:]]+/', ' ')->trim();
-        $terms = array_unique($searchQuery->split(' '));
+        $terms = $searchQuery->split(' ');
         // ignore the search terms that are too short
         return array_filter($terms, static function ($term) {
             return 2 <= $term->length();


143) /usr/src/myapp/src/Repository/PostRepository.php:93    [M] UnwrapArrayFilter

--- Original
+++ New
@@ @@
         $searchQuery = u($searchQuery)->replaceMatches('/[[:space:]]+/', ' ')->trim();
         $terms = array_unique($searchQuery->split(' '));
         // ignore the search terms that are too short
-        return array_filter($terms, static function ($term) {
-            return 2 <= $term->length();
-        });
+        return $terms;
     }
 }


144) /usr/src/myapp/src/Repository/PostRepository.php:94    [M] LessThanOrEqualTo

--- Original
+++ New
@@ @@
         $terms = array_unique($searchQuery->split(' '));
         // ignore the search terms that are too short
         return array_filter($terms, static function ($term) {
-            return 2 <= $term->length();
+            return 2 < $term->length();
         });
     }
 }


145) /usr/src/myapp/src/Security/PostVoter.php:41    [M] InstanceOf_

--- Original
+++ New
@@ @@
     protected function supports(string $attribute, $subject) : bool
     {
         // this voter is only executed on Post objects and for three specific permissions
-        return $subject instanceof Post && \in_array($attribute, [self::SHOW, self::EDIT, self::DELETE], true);
+        return true && \in_array($attribute, [self::SHOW, self::EDIT, self::DELETE], true);
     }
     /**
      * {@inheritdoc}


146) /usr/src/myapp/src/Security/PostVoter.php:41    [M] LogicalAnd

--- Original
+++ New
@@ @@
     protected function supports(string $attribute, $subject) : bool
     {
         // this voter is only executed on Post objects and for three specific permissions
-        return $subject instanceof Post && \in_array($attribute, [self::SHOW, self::EDIT, self::DELETE], true);
+        return $subject instanceof Post || \in_array($attribute, [self::SHOW, self::EDIT, self::DELETE], true);
     }
     /**
      * {@inheritdoc}


147) /usr/src/myapp/src/Security/PostVoter.php:54    [M] InstanceOf_

--- Original
+++ New
@@ @@
     {
         $user = $token->getUser();
         // the user must be logged in; if not, deny permission
-        if (!$user instanceof User) {
+        if (!true) {
             return false;
         }
         // the logic of this voter is pretty simple: if the logged user is the


148) /usr/src/myapp/src/Security/PostVoter.php:55    [M] FalseValue

--- Original
+++ New
@@ @@
         $user = $token->getUser();
         // the user must be logged in; if not, deny permission
         if (!$user instanceof User) {
-            return false;
+            return true;
         }
         // the logic of this voter is pretty simple: if the logged user is the
         // author of the given blog post, grant permission; otherwise, deny it.


149) /usr/src/myapp/src/Twig/AppExtension.php:35    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
     public function __construct(string $locales)
     {
         $localeCodes = explode('|', $locales);
-        sort($localeCodes);
+        
         $this->localeCodes = $localeCodes;
     }
     /**


150) /usr/src/myapp/src/Twig/AppExtension.php:61    [M] Foreach_

--- Original
+++ New
@@ @@
             return $this->locales;
         }
         $this->locales = [];
-        foreach ($this->localeCodes as $localeCode) {
+        foreach (array() as $localeCode) {
             $this->locales[] = ['code' => $localeCode, 'name' => Locales::getName($localeCode, $localeCode)];
         }
         return $this->locales;
     }
 }


151) /usr/src/myapp/src/Twig/SourceCodeExtension.php:62    [M] Identical

--- Original
+++ New
@@ @@
     private function getController() : ?array
     {
         // this happens for example for exceptions (404 errors, etc.)
-        if (null === $this->controller) {
+        if (null !== $this->controller) {
             return null;
         }
         $method = $this->getCallableReflector($this->controller);


152) /usr/src/myapp/src/Twig/SourceCodeExtension.php:68    [M] FalseValue

--- Original
+++ New
@@ @@
             return null;
         }
         $method = $this->getCallableReflector($this->controller);
-        if (false === ($classCode = file($method->getFileName()))) {
+        if (true === ($classCode = file($method->getFileName()))) {
             throw new \LogicException(sprintf('There was an error while trying to read the contents of the "%s" file.', $method->getFileName()));
         }
         $startLine = $method->getStartLine() - 1;


153) /usr/src/myapp/src/Twig/SourceCodeExtension.php:72    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if (false === ($classCode = file($method->getFileName()))) {
             throw new \LogicException(sprintf('There was an error while trying to read the contents of the "%s" file.', $method->getFileName()));
         }
-        $startLine = $method->getStartLine() - 1;
+        $startLine = $method->getStartLine() - 0;
         $endLine = $method->getEndLine();
         while ($startLine > 0) {
             $line = trim($classCode[$startLine - 1]);


154) /usr/src/myapp/src/Twig/SourceCodeExtension.php:72    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if (false === ($classCode = file($method->getFileName()))) {
             throw new \LogicException(sprintf('There was an error while trying to read the contents of the "%s" file.', $method->getFileName()));
         }
-        $startLine = $method->getStartLine() - 1;
+        $startLine = $method->getStartLine() - 2;
         $endLine = $method->getEndLine();
         while ($startLine > 0) {
             $line = trim($classCode[$startLine - 1]);


155) /usr/src/myapp/src/Twig/SourceCodeExtension.php:72    [M] Minus

--- Original
+++ New
@@ @@
         if (false === ($classCode = file($method->getFileName()))) {
             throw new \LogicException(sprintf('There was an error while trying to read the contents of the "%s" file.', $method->getFileName()));
         }
-        $startLine = $method->getStartLine() - 1;
+        $startLine = $method->getStartLine() + 1;
         $endLine = $method->getEndLine();
         while ($startLine > 0) {
             $line = trim($classCode[$startLine - 1]);


156) /usr/src/myapp/src/Twig/SourceCodeExtension.php:75    [M] GreaterThan

--- Original
+++ New
@@ @@
         }
         $startLine = $method->getStartLine() - 1;
         $endLine = $method->getEndLine();
-        while ($startLine > 0) {
+        while ($startLine >= 0) {
             $line = trim($classCode[$startLine - 1]);
             if (\in_array($line, ['{', '}', ''], true)) {
                 break;


157) /usr/src/myapp/src/Twig/SourceCodeExtension.php:75    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         }
         $startLine = $method->getStartLine() - 1;
         $endLine = $method->getEndLine();
-        while ($startLine > 0) {
+        while ($startLine <= 0) {
             $line = trim($classCode[$startLine - 1]);
             if (\in_array($line, ['{', '}', ''], true)) {
                 break;


158) /usr/src/myapp/src/Twig/SourceCodeExtension.php:75    [M] While_

--- Original
+++ New
@@ @@
         }
         $startLine = $method->getStartLine() - 1;
         $endLine = $method->getEndLine();
-        while ($startLine > 0) {
+        while (false) {
             $line = trim($classCode[$startLine - 1]);
             if (\in_array($line, ['{', '}', ''], true)) {
                 break;


159) /usr/src/myapp/src/Twig/SourceCodeExtension.php:76    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $startLine = $method->getStartLine() - 1;
         $endLine = $method->getEndLine();
         while ($startLine > 0) {
-            $line = trim($classCode[$startLine - 1]);
+            $line = trim($classCode[$startLine - 0]);
             if (\in_array($line, ['{', '}', ''], true)) {
                 break;
             }


160) /usr/src/myapp/src/Twig/SourceCodeExtension.php:76    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $startLine = $method->getStartLine() - 1;
         $endLine = $method->getEndLine();
         while ($startLine > 0) {
-            $line = trim($classCode[$startLine - 1]);
+            $line = trim($classCode[$startLine - 2]);
             if (\in_array($line, ['{', '}', ''], true)) {
                 break;
             }


161) /usr/src/myapp/src/Twig/SourceCodeExtension.php:76    [M] Minus

--- Original
+++ New
@@ @@
         $startLine = $method->getStartLine() - 1;
         $endLine = $method->getEndLine();
         while ($startLine > 0) {
-            $line = trim($classCode[$startLine - 1]);
+            $line = trim($classCode[$startLine + 1]);
             if (\in_array($line, ['{', '}', ''], true)) {
                 break;
             }


162) /usr/src/myapp/src/Twig/SourceCodeExtension.php:76    [M] UnwrapTrim

--- Original
+++ New
@@ @@
         $startLine = $method->getStartLine() - 1;
         $endLine = $method->getEndLine();
         while ($startLine > 0) {
-            $line = trim($classCode[$startLine - 1]);
+            $line = $classCode[$startLine - 1];
             if (\in_array($line, ['{', '}', ''], true)) {
                 break;
             }


163) /usr/src/myapp/src/Twig/SourceCodeExtension.php:78    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $endLine = $method->getEndLine();
         while ($startLine > 0) {
             $line = trim($classCode[$startLine - 1]);
-            if (\in_array($line, ['{', '}', ''], true)) {
+            if (\in_array($line, ['}', ''], true)) {
                 break;
             }
             --$startLine;


164) /usr/src/myapp/src/Twig/SourceCodeExtension.php:82    [M] Decrement

--- Original
+++ New
@@ @@
             if (\in_array($line, ['{', '}', ''], true)) {
                 break;
             }
-            --$startLine;
+            ++$startLine;
         }
         $controllerCode = implode('', \array_slice($classCode, $startLine, $endLine - $startLine));
         return ['file_path' => $method->getFileName(), 'starting_line' => $method->getStartLine(), 'source_code' => $this->unindentCode($controllerCode)];


165) /usr/src/myapp/src/Twig/SourceCodeExtension.php:85    [M] Minus

--- Original
+++ New
@@ @@
             }
             --$startLine;
         }
-        $controllerCode = implode('', \array_slice($classCode, $startLine, $endLine - $startLine));
+        $controllerCode = implode('', \array_slice($classCode, $startLine, $endLine + $startLine));
         return ['file_path' => $method->getFileName(), 'starting_line' => $method->getStartLine(), 'source_code' => $this->unindentCode($controllerCode)];
     }
     /**


166) /usr/src/myapp/src/Twig/SourceCodeExtension.php:85    [M] UnwrapArraySlice

--- Original
+++ New
@@ @@
             }
             --$startLine;
         }
-        $controllerCode = implode('', \array_slice($classCode, $startLine, $endLine - $startLine));
+        $controllerCode = implode('', $classCode);
         return ['file_path' => $method->getFileName(), 'starting_line' => $method->getStartLine(), 'source_code' => $this->unindentCode($controllerCode)];
     }
     /**


167) /usr/src/myapp/src/Twig/SourceCodeExtension.php:124    [M] DecrementInteger

--- Original
+++ New
@@ @@
             // Demo app, we consider that all templates are stored in files and
             // that their file paths can be obtained through the source context.
             'file_path' => $templateSource->getPath(),
-            'starting_line' => 1,
+            'starting_line' => 0,
             'source_code' => $templateSource->getCode(),
         ];
     }


168) /usr/src/myapp/src/Twig/SourceCodeExtension.php:124    [M] IncrementInteger

--- Original
+++ New
@@ @@
             // Demo app, we consider that all templates are stored in files and
             // that their file paths can be obtained through the source context.
             'file_path' => $templateSource->getPath(),
-            'starting_line' => 1,
+            'starting_line' => 2,
             'source_code' => $templateSource->getCode(),
         ];
     }


169) /usr/src/myapp/src/Twig/SourceCodeExtension.php:137    [M] UnwrapArrayFilter

--- Original
+++ New
@@ @@
     private function unindentCode(string $code) : string
     {
         $codeLines = u($code)->split("\n");
-        $indentedOrBlankLines = array_filter($codeLines, static function ($lineOfCode) {
-            return u($lineOfCode)->isEmpty() || u($lineOfCode)->startsWith('    ');
-        });
+        $indentedOrBlankLines = $codeLines;
         $codeIsIndented = \count($indentedOrBlankLines) === \count($codeLines);
         if ($codeIsIndented) {
             $unindentedLines = array_map(static function ($lineOfCode) {


170) /usr/src/myapp/src/Twig/SourceCodeExtension.php:138    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
         $codeLines = u($code)->split("\n");
         $indentedOrBlankLines = array_filter($codeLines, static function ($lineOfCode) {
-            return u($lineOfCode)->isEmpty() || u($lineOfCode)->startsWith('    ');
+            return u($lineOfCode)->isEmpty() && u($lineOfCode)->startsWith('    ');
         });
         $codeIsIndented = \count($indentedOrBlankLines) === \count($codeLines);
         if ($codeIsIndented) {


171) /usr/src/myapp/src/Twig/SourceCodeExtension.php:141    [M] Identical

--- Original
+++ New
@@ @@
         $indentedOrBlankLines = array_filter($codeLines, static function ($lineOfCode) {
             return u($lineOfCode)->isEmpty() || u($lineOfCode)->startsWith('    ');
         });
-        $codeIsIndented = \count($indentedOrBlankLines) === \count($codeLines);
+        $codeIsIndented = \count($indentedOrBlankLines) !== \count($codeLines);
         if ($codeIsIndented) {
             $unindentedLines = array_map(static function ($lineOfCode) {
                 return u($lineOfCode)->after('    ');


172) /usr/src/myapp/src/Twig/SourceCodeExtension.php:143    [M] UnwrapArrayMap

--- Original
+++ New
@@ @@
         });
         $codeIsIndented = \count($indentedOrBlankLines) === \count($codeLines);
         if ($codeIsIndented) {
-            $unindentedLines = array_map(static function ($lineOfCode) {
-                return u($lineOfCode)->after('    ');
-            }, $codeLines);
+            $unindentedLines = $codeLines;
             $code = u("\n")->join($unindentedLines)->toString();
         }
         return $code;
     }
 }


173) /usr/src/myapp/src/Utils/Validator.php:32    [M] PregMatchRemoveCaret

--- Original
+++ New
@@ @@
         if (empty($username)) {
             throw new InvalidArgumentException('The username can not be empty.');
         }
-        if (1 !== preg_match('/^[a-z_]+$/', $username)) {
+        if (1 !== preg_match('/[a-z_]+$/', $username)) {
             throw new InvalidArgumentException('The username must contain only lowercase latin characters and underscores.');
         }
         return $username;


174) /usr/src/myapp/src/Utils/Validator.php:32    [M] PregMatchRemoveDollar

--- Original
+++ New
@@ @@
         if (empty($username)) {
             throw new InvalidArgumentException('The username can not be empty.');
         }
-        if (1 !== preg_match('/^[a-z_]+$/', $username)) {
+        if (1 !== preg_match('/^[a-z_]+/', $username)) {
             throw new InvalidArgumentException('The username must contain only lowercase latin characters and underscores.');
         }
         return $username;


Timed Out mutants:
==================

1) /usr/src/myapp/src/Twig/SourceCodeExtension.php:79    [M] Break_

--- Original
+++ New
@@ @@
         while ($startLine > 0) {
             $line = trim($classCode[$startLine - 1]);
             if (\in_array($line, ['{', '}', ''], true)) {
-                break;
+                continue;
             }
             --$startLine;
         }


Skipped mutants:
================

Not Covered mutants:
====================

1) /usr/src/myapp/src/Command/AddUserCommand.php:125    [M] Concat

--- Original
+++ New
@@ @@
         // Ask for the username if it's not defined
         $username = $input->getArgument('username');
         if (null !== $username) {
-            $this->io->text(' > <info>Username</info>: ' . $username);
+            $this->io->text($username . ' > <info>Username</info>: ');
         } else {
             $username = $this->io->ask('Username', null, [$this->validator, 'validateUsername']);
             $input->setArgument('username', $username);


2) /usr/src/myapp/src/Command/AddUserCommand.php:125    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         // Ask for the username if it's not defined
         $username = $input->getArgument('username');
         if (null !== $username) {
-            $this->io->text(' > <info>Username</info>: ' . $username);
+            $this->io->text($username);
         } else {
             $username = $this->io->ask('Username', null, [$this->validator, 'validateUsername']);
             $input->setArgument('username', $username);


3) /usr/src/myapp/src/Command/AddUserCommand.php:125    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         // Ask for the username if it's not defined
         $username = $input->getArgument('username');
         if (null !== $username) {
-            $this->io->text(' > <info>Username</info>: ' . $username);
+            $this->io->text(' > <info>Username</info>: ');
         } else {
             $username = $this->io->ask('Username', null, [$this->validator, 'validateUsername']);
             $input->setArgument('username', $username);


4) /usr/src/myapp/src/Command/AddUserCommand.php:125    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         // Ask for the username if it's not defined
         $username = $input->getArgument('username');
         if (null !== $username) {
-            $this->io->text(' > <info>Username</info>: ' . $username);
+            
         } else {
             $username = $this->io->ask('Username', null, [$this->validator, 'validateUsername']);
             $input->setArgument('username', $username);


5) /usr/src/myapp/src/Command/AddUserCommand.php:134    [M] Concat

--- Original
+++ New
@@ @@
         // Ask for the password if it's not defined
         $password = $input->getArgument('password');
         if (null !== $password) {
-            $this->io->text(' > <info>Password</info>: ' . u('*')->repeat(u($password)->length()));
+            $this->io->text(u('*')->repeat(u($password)->length()) . ' > <info>Password</info>: ');
         } else {
             $password = $this->io->askHidden('Password (your type will be hidden)', [$this->validator, 'validatePassword']);
             $input->setArgument('password', $password);


6) /usr/src/myapp/src/Command/AddUserCommand.php:134    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         // Ask for the password if it's not defined
         $password = $input->getArgument('password');
         if (null !== $password) {
-            $this->io->text(' > <info>Password</info>: ' . u('*')->repeat(u($password)->length()));
+            $this->io->text(u('*')->repeat(u($password)->length()));
         } else {
             $password = $this->io->askHidden('Password (your type will be hidden)', [$this->validator, 'validatePassword']);
             $input->setArgument('password', $password);


7) /usr/src/myapp/src/Command/AddUserCommand.php:134    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         // Ask for the password if it's not defined
         $password = $input->getArgument('password');
         if (null !== $password) {
-            $this->io->text(' > <info>Password</info>: ' . u('*')->repeat(u($password)->length()));
+            $this->io->text(' > <info>Password</info>: ');
         } else {
             $password = $this->io->askHidden('Password (your type will be hidden)', [$this->validator, 'validatePassword']);
             $input->setArgument('password', $password);


8) /usr/src/myapp/src/Command/AddUserCommand.php:134    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         // Ask for the password if it's not defined
         $password = $input->getArgument('password');
         if (null !== $password) {
-            $this->io->text(' > <info>Password</info>: ' . u('*')->repeat(u($password)->length()));
+            
         } else {
             $password = $this->io->askHidden('Password (your type will be hidden)', [$this->validator, 'validatePassword']);
             $input->setArgument('password', $password);


9) /usr/src/myapp/src/Command/AddUserCommand.php:143    [M] Concat

--- Original
+++ New
@@ @@
         // Ask for the email if it's not defined
         $email = $input->getArgument('email');
         if (null !== $email) {
-            $this->io->text(' > <info>Email</info>: ' . $email);
+            $this->io->text($email . ' > <info>Email</info>: ');
         } else {
             $email = $this->io->ask('Email', null, [$this->validator, 'validateEmail']);
             $input->setArgument('email', $email);


10) /usr/src/myapp/src/Command/AddUserCommand.php:143    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         // Ask for the email if it's not defined
         $email = $input->getArgument('email');
         if (null !== $email) {
-            $this->io->text(' > <info>Email</info>: ' . $email);
+            $this->io->text($email);
         } else {
             $email = $this->io->ask('Email', null, [$this->validator, 'validateEmail']);
             $input->setArgument('email', $email);


11) /usr/src/myapp/src/Command/AddUserCommand.php:143    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         // Ask for the email if it's not defined
         $email = $input->getArgument('email');
         if (null !== $email) {
-            $this->io->text(' > <info>Email</info>: ' . $email);
+            $this->io->text(' > <info>Email</info>: ');
         } else {
             $email = $this->io->ask('Email', null, [$this->validator, 'validateEmail']);
             $input->setArgument('email', $email);


12) /usr/src/myapp/src/Command/AddUserCommand.php:143    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         // Ask for the email if it's not defined
         $email = $input->getArgument('email');
         if (null !== $email) {
-            $this->io->text(' > <info>Email</info>: ' . $email);
+            
         } else {
             $email = $this->io->ask('Email', null, [$this->validator, 'validateEmail']);
             $input->setArgument('email', $email);


13) /usr/src/myapp/src/Command/AddUserCommand.php:152    [M] Concat

--- Original
+++ New
@@ @@
         // Ask for the full name if it's not defined
         $fullName = $input->getArgument('full-name');
         if (null !== $fullName) {
-            $this->io->text(' > <info>Full Name</info>: ' . $fullName);
+            $this->io->text($fullName . ' > <info>Full Name</info>: ');
         } else {
             $fullName = $this->io->ask('Full Name', null, [$this->validator, 'validateFullName']);
             $input->setArgument('full-name', $fullName);


14) /usr/src/myapp/src/Command/AddUserCommand.php:152    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         // Ask for the full name if it's not defined
         $fullName = $input->getArgument('full-name');
         if (null !== $fullName) {
-            $this->io->text(' > <info>Full Name</info>: ' . $fullName);
+            $this->io->text($fullName);
         } else {
             $fullName = $this->io->ask('Full Name', null, [$this->validator, 'validateFullName']);
             $input->setArgument('full-name', $fullName);


15) /usr/src/myapp/src/Command/AddUserCommand.php:152    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         // Ask for the full name if it's not defined
         $fullName = $input->getArgument('full-name');
         if (null !== $fullName) {
-            $this->io->text(' > <info>Full Name</info>: ' . $fullName);
+            $this->io->text(' > <info>Full Name</info>: ');
         } else {
             $fullName = $this->io->ask('Full Name', null, [$this->validator, 'validateFullName']);
             $input->setArgument('full-name', $fullName);


16) /usr/src/myapp/src/Command/AddUserCommand.php:152    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         // Ask for the full name if it's not defined
         $fullName = $input->getArgument('full-name');
         if (null !== $fullName) {
-            $this->io->text(' > <info>Full Name</info>: ' . $fullName);
+            
         } else {
             $fullName = $this->io->ask('Full Name', null, [$this->validator, 'validateFullName']);
             $input->setArgument('full-name', $fullName);


17) /usr/src/myapp/src/Command/AddUserCommand.php:195    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $this->io->success(sprintf('%s was successfully created: %s (%s)', $isAdmin ? 'Administrator user' : 'User', $user->getUsername(), $user->getEmail()));
         $event = $stopwatch->stop('add-user-command');
         if ($output->isVerbose()) {
-            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1024 ** 2));
+            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1023 ** 2));
         }
         return Command::SUCCESS;
     }


18) /usr/src/myapp/src/Command/AddUserCommand.php:195    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $this->io->success(sprintf('%s was successfully created: %s (%s)', $isAdmin ? 'Administrator user' : 'User', $user->getUsername(), $user->getEmail()));
         $event = $stopwatch->stop('add-user-command');
         if ($output->isVerbose()) {
-            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1024 ** 2));
+            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1025 ** 2));
         }
         return Command::SUCCESS;
     }


19) /usr/src/myapp/src/Command/AddUserCommand.php:195    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $this->io->success(sprintf('%s was successfully created: %s (%s)', $isAdmin ? 'Administrator user' : 'User', $user->getUsername(), $user->getEmail()));
         $event = $stopwatch->stop('add-user-command');
         if ($output->isVerbose()) {
-            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1024 ** 2));
+            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1024 ** 1));
         }
         return Command::SUCCESS;
     }


20) /usr/src/myapp/src/Command/AddUserCommand.php:195    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $this->io->success(sprintf('%s was successfully created: %s (%s)', $isAdmin ? 'Administrator user' : 'User', $user->getUsername(), $user->getEmail()));
         $event = $stopwatch->stop('add-user-command');
         if ($output->isVerbose()) {
-            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1024 ** 2));
+            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1024 ** 3));
         }
         return Command::SUCCESS;
     }


21) /usr/src/myapp/src/Command/AddUserCommand.php:195    [M] Exponentiation

--- Original
+++ New
@@ @@
         $this->io->success(sprintf('%s was successfully created: %s (%s)', $isAdmin ? 'Administrator user' : 'User', $user->getUsername(), $user->getEmail()));
         $event = $stopwatch->stop('add-user-command');
         if ($output->isVerbose()) {
-            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1024 ** 2));
+            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / (1024 / 2)));
         }
         return Command::SUCCESS;
     }


22) /usr/src/myapp/src/Command/AddUserCommand.php:195    [M] Division

--- Original
+++ New
@@ @@
         $this->io->success(sprintf('%s was successfully created: %s (%s)', $isAdmin ? 'Administrator user' : 'User', $user->getUsername(), $user->getEmail()));
         $event = $stopwatch->stop('add-user-command');
         if ($output->isVerbose()) {
-            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1024 ** 2));
+            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() * 1024 ** 2));
         }
         return Command::SUCCESS;
     }


23) /usr/src/myapp/src/Command/AddUserCommand.php:195    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->io->success(sprintf('%s was successfully created: %s (%s)', $isAdmin ? 'Administrator user' : 'User', $user->getUsername(), $user->getEmail()));
         $event = $stopwatch->stop('add-user-command');
         if ($output->isVerbose()) {
-            $this->io->comment(sprintf('New user database id: %d / Elapsed time: %.2f ms / Consumed memory: %.2f MB', $user->getId(), $event->getDuration(), $event->getMemory() / 1024 ** 2));
+            
         }
         return Command::SUCCESS;
     }


24) /usr/src/myapp/src/Command/AddUserCommand.php:207    [M] Throw_

--- Original
+++ New
@@ @@
         // first check if a user with the same username already exists.
         $existingUser = $this->users->findOneBy(['username' => $username]);
         if (null !== $existingUser) {
-            throw new RuntimeException(sprintf('There is already a user registered with the "%s" username.', $username));
+            new RuntimeException(sprintf('There is already a user registered with the "%s" username.', $username));
         }
         // validate password and email if is not this input means interactive.
         $this->validator->validatePassword($plainPassword);


25) /usr/src/myapp/src/Command/AddUserCommand.php:219    [M] Throw_

--- Original
+++ New
@@ @@
         // check if a user with the same email already exists.
         $existingEmail = $this->users->findOneBy(['email' => $email]);
         if (null !== $existingEmail) {
-            throw new RuntimeException(sprintf('There is already a user registered with the "%s" email.', $email));
+            new RuntimeException(sprintf('There is already a user registered with the "%s" email.', $email));
         }
     }
     /**


26) /usr/src/myapp/src/Command/DeleteUserCommand.php:56    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private SymfonyStyle $io;
     public function __construct(private EntityManagerInterface $entityManager, private Validator $validator, private UserRepository $users, private LoggerInterface $logger)
     {
-        parent::__construct();
+        
     }
     /**
      * {@inheritdoc}


27) /usr/src/myapp/src/Command/DeleteUserCommand.php:64    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     protected function configure() : void
     {
-        $this->addArgument('username', InputArgument::REQUIRED, 'The username of an existing user')->setHelp(<<<'HELP'
-The <info>%command.name%</info> command deletes users from the database:
-
-  <info>php %command.full_name%</info> <comment>username</comment>
-
-If you omit the argument, the command will ask you to
-provide the missing value:
-
-  <info>php %command.full_name%</info>
-HELP
-);
+        
     }
     protected function initialize(InputInterface $input, OutputInterface $output) : void
     {


28) /usr/src/myapp/src/Command/DeleteUserCommand.php:89    [M] NotIdentical

--- Original
+++ New
@@ @@
     }
     protected function interact(InputInterface $input, OutputInterface $output) : void
     {
-        if (null !== $input->getArgument('username')) {
+        if (null === $input->getArgument('username')) {
             return;
         }
         $this->io->title('Delete User Command Interactive Wizard');


29) /usr/src/myapp/src/Command/DeleteUserCommand.php:93    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if (null !== $input->getArgument('username')) {
             return;
         }
-        $this->io->title('Delete User Command Interactive Wizard');
+        
         $this->io->text(['If you prefer to not use this interactive wizard, provide the', 'arguments required by this command as follows:', '', ' $ php bin/console app:delete-user username', '', 'Now we\'ll ask you for the value of all the missing command arguments.', '']);
         $username = $this->io->ask('Username', null, [$this->validator, 'validateUsername']);
         $input->setArgument('username', $username);


30) /usr/src/myapp/src/Command/DeleteUserCommand.php:94    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             return;
         }
         $this->io->title('Delete User Command Interactive Wizard');
-        $this->io->text(['If you prefer to not use this interactive wizard, provide the', 'arguments required by this command as follows:', '', ' $ php bin/console app:delete-user username', '', 'Now we\'ll ask you for the value of all the missing command arguments.', '']);
+        $this->io->text(['arguments required by this command as follows:', '', ' $ php bin/console app:delete-user username', '', 'Now we\'ll ask you for the value of all the missing command arguments.', '']);
         $username = $this->io->ask('Username', null, [$this->validator, 'validateUsername']);
         $input->setArgument('username', $username);
     }


31) /usr/src/myapp/src/Command/DeleteUserCommand.php:94    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             return;
         }
         $this->io->title('Delete User Command Interactive Wizard');
-        $this->io->text(['If you prefer to not use this interactive wizard, provide the', 'arguments required by this command as follows:', '', ' $ php bin/console app:delete-user username', '', 'Now we\'ll ask you for the value of all the missing command arguments.', '']);
+        
         $username = $this->io->ask('Username', null, [$this->validator, 'validateUsername']);
         $input->setArgument('username', $username);
     }


32) /usr/src/myapp/src/Command/DeleteUserCommand.php:104    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         }
         $this->io->title('Delete User Command Interactive Wizard');
         $this->io->text(['If you prefer to not use this interactive wizard, provide the', 'arguments required by this command as follows:', '', ' $ php bin/console app:delete-user username', '', 'Now we\'ll ask you for the value of all the missing command arguments.', '']);
-        $username = $this->io->ask('Username', null, [$this->validator, 'validateUsername']);
+        $username = $this->io->ask('Username', null, ['validateUsername']);
         $input->setArgument('username', $username);
     }
     protected function execute(InputInterface $input, OutputInterface $output) : int


33) /usr/src/myapp/src/Command/DeleteUserCommand.php:105    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->io->title('Delete User Command Interactive Wizard');
         $this->io->text(['If you prefer to not use this interactive wizard, provide the', 'arguments required by this command as follows:', '', ' $ php bin/console app:delete-user username', '', 'Now we\'ll ask you for the value of all the missing command arguments.', '']);
         $username = $this->io->ask('Username', null, [$this->validator, 'validateUsername']);
-        $input->setArgument('username', $username);
+        
     }
     protected function execute(InputInterface $input, OutputInterface $output) : int
     {


34) /usr/src/myapp/src/Command/DeleteUserCommand.php:115    [M] Identical

--- Original
+++ New
@@ @@
         $username = $this->validator->validateUsername($input->getArgument('username'));
         /** @var User|null $user */
         $user = $this->users->findOneByUsername($username);
-        if (null === $user) {
+        if (null !== $user) {
             throw new RuntimeException(sprintf('User with username "%s" not found.', $username));
         }
         // After an entity has been removed, its in-memory state is the same


35) /usr/src/myapp/src/Command/DeleteUserCommand.php:116    [M] Throw_

--- Original
+++ New
@@ @@
         /** @var User|null $user */
         $user = $this->users->findOneByUsername($username);
         if (null === $user) {
-            throw new RuntimeException(sprintf('User with username "%s" not found.', $username));
+            new RuntimeException(sprintf('User with username "%s" not found.', $username));
         }
         // After an entity has been removed, its in-memory state is the same
         // as before the removal, except for generated identifiers.


36) /usr/src/myapp/src/Command/DeleteUserCommand.php:124    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         // as before the removal, except for generated identifiers.
         // See https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/working-with-objects.html#removing-entities
         $userId = $user->getId();
-        $this->entityManager->remove($user);
+        
         $this->entityManager->flush();
         $userUsername = $user->getUsername();
         $userEmail = $user->getEmail();


37) /usr/src/myapp/src/Command/DeleteUserCommand.php:125    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         // See https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/working-with-objects.html#removing-entities
         $userId = $user->getId();
         $this->entityManager->remove($user);
-        $this->entityManager->flush();
+        
         $userUsername = $user->getUsername();
         $userEmail = $user->getEmail();
         $this->io->success(sprintf('User "%s" (ID: %d, email: %s) was successfully deleted.', $userUsername, $userId, $userEmail));


38) /usr/src/myapp/src/Command/DeleteUserCommand.php:130    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->entityManager->flush();
         $userUsername = $user->getUsername();
         $userEmail = $user->getEmail();
-        $this->io->success(sprintf('User "%s" (ID: %d, email: %s) was successfully deleted.', $userUsername, $userId, $userEmail));
+        
         // Logging is helpful and important to keep a trace of what happened in the software runtime flow.
         // See https://symfony.com/doc/current/logging.html
         $this->logger->info('User "{username}" (ID: {id}, email: {email}) was successfully deleted.', ['username' => $userUsername, 'id' => $userId, 'email' => $userEmail]);


39) /usr/src/myapp/src/Command/DeleteUserCommand.php:134    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $this->io->success(sprintf('User "%s" (ID: %d, email: %s) was successfully deleted.', $userUsername, $userId, $userEmail));
         // Logging is helpful and important to keep a trace of what happened in the software runtime flow.
         // See https://symfony.com/doc/current/logging.html
-        $this->logger->info('User "{username}" (ID: {id}, email: {email}) was successfully deleted.', ['username' => $userUsername, 'id' => $userId, 'email' => $userEmail]);
+        $this->logger->info('User "{username}" (ID: {id}, email: {email}) was successfully deleted.', ['id' => $userId, 'email' => $userEmail]);
         return Command::SUCCESS;
     }
 }


40) /usr/src/myapp/src/Command/DeleteUserCommand.php:134    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $userUsername = $user->getUsername();
         $userEmail = $user->getEmail();
         $this->io->success(sprintf('User "%s" (ID: %d, email: %s) was successfully deleted.', $userUsername, $userId, $userEmail));
-        // Logging is helpful and important to keep a trace of what happened in the software runtime flow.
-        // See https://symfony.com/doc/current/logging.html
-        $this->logger->info('User "{username}" (ID: {id}, email: {email}) was successfully deleted.', ['username' => $userUsername, 'id' => $userId, 'email' => $userEmail]);
+        
         return Command::SUCCESS;
     }
 }


41) /usr/src/myapp/src/Controller/Admin/BlogController.php:52    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      *     could move this annotation to any other controller while maintaining
      *     the route name and therefore, without breaking any existing link.
      */
-    #[Route('/', methods: ['GET'], name: 'admin_index')]
+    #[Route('/', methods: [], name: 'admin_index')]
     #[Route('/', methods: ['GET'], name: 'admin_post_index')]
     public function index(PostRepository $posts) : Response
     {


42) /usr/src/myapp/src/Controller/Admin/BlogController.php:53    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      *     the route name and therefore, without breaking any existing link.
      */
     #[Route('/', methods: ['GET'], name: 'admin_index')]
-    #[Route('/', methods: ['GET'], name: 'admin_post_index')]
+    #[Route('/', methods: [], name: 'admin_post_index')]
     public function index(PostRepository $posts) : Response
     {
         $authorPosts = $posts->findBy(['author' => $this->getUser()], ['publishedAt' => 'DESC']);


43) /usr/src/myapp/src/Controller/Admin/BlogController.php:68    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      * to constraint the HTTP methods each controller responds to (by default
      * it responds to all methods).
      */
-    #[Route('/new', methods: ['GET', 'POST'], name: 'admin_post_new')]
+    #[Route('/new', methods: ['POST'], name: 'admin_post_new')]
     public function new(Request $request, EntityManagerInterface $entityManager) : Response
     {
         $post = new Post();


44) /usr/src/myapp/src/Controller/Admin/BlogController.php:110    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     /**
      * Finds and displays a Post entity.
      */
-    #[Route('/{id<\\d+>}', methods: ['GET'], name: 'admin_post_show')]
+    #[Route('/{id<\\d+>}', methods: [], name: 'admin_post_show')]
     public function show(Post $post) : Response
     {
         // This security check can also be performed


45) /usr/src/myapp/src/Controller/Admin/BlogController.php:125    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     /**
      * Displays a form to edit an existing Post entity.
      */
-    #[Route('/{id<\\d+>}/edit', methods: ['GET', 'POST'], name: 'admin_post_edit')]
+    #[Route('/{id<\\d+>}/edit', methods: ['POST'], name: 'admin_post_edit')]
     #[IsGranted('edit', subject: 'post', message: 'Posts can only be edited by their authors.')]
     public function edit(Request $request, Post $post, EntityManagerInterface $entityManager) : Response
     {


46) /usr/src/myapp/src/Controller/Admin/BlogController.php:148    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     /**
      * Deletes a Post entity.
      */
-    #[Route('/{id}/delete', methods: ['POST'], name: 'admin_post_delete')]
+    #[Route('/{id}/delete', methods: [], name: 'admin_post_delete')]
     #[IsGranted('delete', subject: 'post')]
     public function delete(Request $request, Post $post, EntityManagerInterface $entityManager) : Response
     {


47) /usr/src/myapp/src/Controller/BlogController.php:45    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      *
      * See https://symfony.com/doc/current/routing.html#special-parameters
      */
-    #[Route('/', defaults: ['page' => '1', '_format' => 'html'], methods: ['GET'], name: 'blog_index')]
+    #[Route('/', defaults: ['_format' => 'html'], methods: ['GET'], name: 'blog_index')]
     #[Route('/rss.xml', defaults: ['page' => '1', '_format' => 'xml'], methods: ['GET'], name: 'blog_rss')]
     #[Route('/page/{page<[1-9]\\d*>}', defaults: ['_format' => 'html'], methods: ['GET'], name: 'blog_index_paginated')]
     #[Cache(smaxage: 10)]


48) /usr/src/myapp/src/Controller/BlogController.php:45    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      *
      * See https://symfony.com/doc/current/routing.html#special-parameters
      */
-    #[Route('/', defaults: ['page' => '1', '_format' => 'html'], methods: ['GET'], name: 'blog_index')]
+    #[Route('/', defaults: ['page' => '1', '_format' => 'html'], methods: [], name: 'blog_index')]
     #[Route('/rss.xml', defaults: ['page' => '1', '_format' => 'xml'], methods: ['GET'], name: 'blog_rss')]
     #[Route('/page/{page<[1-9]\\d*>}', defaults: ['_format' => 'html'], methods: ['GET'], name: 'blog_index_paginated')]
     #[Cache(smaxage: 10)]


49) /usr/src/myapp/src/Controller/BlogController.php:46    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      * See https://symfony.com/doc/current/routing.html#special-parameters
      */
     #[Route('/', defaults: ['page' => '1', '_format' => 'html'], methods: ['GET'], name: 'blog_index')]
-    #[Route('/rss.xml', defaults: ['page' => '1', '_format' => 'xml'], methods: ['GET'], name: 'blog_rss')]
+    #[Route('/rss.xml', defaults: ['_format' => 'xml'], methods: ['GET'], name: 'blog_rss')]
     #[Route('/page/{page<[1-9]\\d*>}', defaults: ['_format' => 'html'], methods: ['GET'], name: 'blog_index_paginated')]
     #[Cache(smaxage: 10)]
     public function index(Request $request, int $page, string $_format, PostRepository $posts, TagRepository $tags) : Response


50) /usr/src/myapp/src/Controller/BlogController.php:46    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      * See https://symfony.com/doc/current/routing.html#special-parameters
      */
     #[Route('/', defaults: ['page' => '1', '_format' => 'html'], methods: ['GET'], name: 'blog_index')]
-    #[Route('/rss.xml', defaults: ['page' => '1', '_format' => 'xml'], methods: ['GET'], name: 'blog_rss')]
+    #[Route('/rss.xml', defaults: ['page' => '1', '_format' => 'xml'], methods: [], name: 'blog_rss')]
     #[Route('/page/{page<[1-9]\\d*>}', defaults: ['_format' => 'html'], methods: ['GET'], name: 'blog_index_paginated')]
     #[Cache(smaxage: 10)]
     public function index(Request $request, int $page, string $_format, PostRepository $posts, TagRepository $tags) : Response


51) /usr/src/myapp/src/Controller/BlogController.php:47    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     #[Route('/', defaults: ['page' => '1', '_format' => 'html'], methods: ['GET'], name: 'blog_index')]
     #[Route('/rss.xml', defaults: ['page' => '1', '_format' => 'xml'], methods: ['GET'], name: 'blog_rss')]
-    #[Route('/page/{page<[1-9]\\d*>}', defaults: ['_format' => 'html'], methods: ['GET'], name: 'blog_index_paginated')]
+    #[Route('/page/{page<[1-9]\\d*>}', defaults: [], methods: ['GET'], name: 'blog_index_paginated')]
     #[Cache(smaxage: 10)]
     public function index(Request $request, int $page, string $_format, PostRepository $posts, TagRepository $tags) : Response
     {


52) /usr/src/myapp/src/Controller/BlogController.php:47    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     #[Route('/', defaults: ['page' => '1', '_format' => 'html'], methods: ['GET'], name: 'blog_index')]
     #[Route('/rss.xml', defaults: ['page' => '1', '_format' => 'xml'], methods: ['GET'], name: 'blog_rss')]
-    #[Route('/page/{page<[1-9]\\d*>}', defaults: ['_format' => 'html'], methods: ['GET'], name: 'blog_index_paginated')]
+    #[Route('/page/{page<[1-9]\\d*>}', defaults: ['_format' => 'html'], methods: [], name: 'blog_index_paginated')]
     #[Cache(smaxage: 10)]
     public function index(Request $request, int $page, string $_format, PostRepository $posts, TagRepository $tags) : Response
     {


53) /usr/src/myapp/src/Controller/BlogController.php:48    [M] DecrementInteger

--- Original
+++ New
@@ @@
     #[Route('/', defaults: ['page' => '1', '_format' => 'html'], methods: ['GET'], name: 'blog_index')]
     #[Route('/rss.xml', defaults: ['page' => '1', '_format' => 'xml'], methods: ['GET'], name: 'blog_rss')]
     #[Route('/page/{page<[1-9]\\d*>}', defaults: ['_format' => 'html'], methods: ['GET'], name: 'blog_index_paginated')]
-    #[Cache(smaxage: 10)]
+    #[Cache(smaxage: 9)]
     public function index(Request $request, int $page, string $_format, PostRepository $posts, TagRepository $tags) : Response
     {
         $tag = null;


54) /usr/src/myapp/src/Controller/BlogController.php:48    [M] IncrementInteger

--- Original
+++ New
@@ @@
     #[Route('/', defaults: ['page' => '1', '_format' => 'html'], methods: ['GET'], name: 'blog_index')]
     #[Route('/rss.xml', defaults: ['page' => '1', '_format' => 'xml'], methods: ['GET'], name: 'blog_rss')]
     #[Route('/page/{page<[1-9]\\d*>}', defaults: ['_format' => 'html'], methods: ['GET'], name: 'blog_index_paginated')]
-    #[Cache(smaxage: 10)]
+    #[Cache(smaxage: 11)]
     public function index(Request $request, int $page, string $_format, PostRepository $posts, TagRepository $tags) : Response
     {
         $tag = null;


55) /usr/src/myapp/src/Controller/BlogController.php:53    [M] ArrayItem

--- Original
+++ New
@@ @@
     {
         $tag = null;
         if ($request->query->has('tag')) {
-            $tag = $tags->findOneBy(['name' => $request->query->get('tag')]);
+            $tag = $tags->findOneBy(['name' > $request->query->get('tag')]);
         }
         $latestPosts = $posts->findLatest($page, $tag);
         // Every template name also has two extensions that specify the format and


56) /usr/src/myapp/src/Controller/BlogController.php:53    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $tag = null;
         if ($request->query->has('tag')) {
-            $tag = $tags->findOneBy(['name' => $request->query->get('tag')]);
+            $tag = $tags->findOneBy([]);
         }
         $latestPosts = $posts->findLatest($page, $tag);
         // Every template name also has two extensions that specify the format and


57) /usr/src/myapp/src/Controller/BlogController.php:73    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      *
      * See https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html
      */
-    #[Route('/posts/{slug}', methods: ['GET'], name: 'blog_post')]
+    #[Route('/posts/{slug}', methods: [], name: 'blog_post')]
     public function postShow(Post $post) : Response
     {
         // Symfony's 'dump()' function is an improved version of PHP's 'var_dump()' but


58) /usr/src/myapp/src/Controller/BlogController.php:99    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      *
      * See https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html#doctrine-converter
      */
-    #[Route('/comment/{postSlug}/new', methods: ['POST'], name: 'comment_new')]
+    #[Route('/comment/{postSlug}/new', methods: [], name: 'comment_new')]
     #[IsGranted('IS_AUTHENTICATED_FULLY')]
     #[ParamConverter('post', options: ['mapping' => ['postSlug' => 'slug']])]
     public function commentNew(Request $request, Post $post, EventDispatcherInterface $eventDispatcher, EntityManagerInterface $entityManager) : Response


59) /usr/src/myapp/src/Controller/BlogController.php:101    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     #[Route('/comment/{postSlug}/new', methods: ['POST'], name: 'comment_new')]
     #[IsGranted('IS_AUTHENTICATED_FULLY')]
-    #[ParamConverter('post', options: ['mapping' => ['postSlug' => 'slug']])]
+    #[ParamConverter('post', options: ['mapping' => []])]
     public function commentNew(Request $request, Post $post, EventDispatcherInterface $eventDispatcher, EntityManagerInterface $entityManager) : Response
     {
         $comment = new Comment();


60) /usr/src/myapp/src/Controller/BlogController.php:101    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     #[Route('/comment/{postSlug}/new', methods: ['POST'], name: 'comment_new')]
     #[IsGranted('IS_AUTHENTICATED_FULLY')]
-    #[ParamConverter('post', options: ['mapping' => ['postSlug' => 'slug']])]
+    #[ParamConverter('post', options: [])]
     public function commentNew(Request $request, Post $post, EventDispatcherInterface $eventDispatcher, EntityManagerInterface $entityManager) : Response
     {
         $comment = new Comment();


61) /usr/src/myapp/src/Controller/BlogController.php:125    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $eventDispatcher->dispatch(new CommentCreatedEvent($comment));
             return $this->redirectToRoute('blog_post', ['slug' => $post->getSlug()]);
         }
-        return $this->render('blog/comment_form_error.html.twig', ['post' => $post, 'form' => $form->createView()]);
+        return $this->render('blog/comment_form_error.html.twig', ['form' => $form->createView()]);
     }
     /**
      * This controller is called directly via the render() function in the


62) /usr/src/myapp/src/Controller/BlogController.php:127    [M] ArrayItem

--- Original
+++ New
@@ @@
             $eventDispatcher->dispatch(new CommentCreatedEvent($comment));
             return $this->redirectToRoute('blog_post', ['slug' => $post->getSlug()]);
         }
-        return $this->render('blog/comment_form_error.html.twig', ['post' => $post, 'form' => $form->createView()]);
+        return $this->render('blog/comment_form_error.html.twig', ['post' => $post, 'form' > $form->createView()]);
     }
     /**
      * This controller is called directly via the render() function in the


63) /usr/src/myapp/src/Controller/BlogController.php:149    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $form = $this->createForm(CommentType::class);
         return $this->render('blog/_comment_form.html.twig', ['post' => $post, 'form' => $form->createView()]);
     }
-    #[Route('/search', methods: ['GET'], name: 'blog_search')]
+    #[Route('/search', methods: [], name: 'blog_search')]
     public function search(Request $request, PostRepository $posts) : Response
     {
         $query = $request->query->get('q', '');


64) /usr/src/myapp/src/Controller/BlogController.php:156    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $query = $request->query->get('q', '');
         $limit = $request->query->get('l', 10);
         if (!$request->isXmlHttpRequest()) {
-            return $this->render('blog/search.html.twig', ['query' => $query]);
+            return $this->render('blog/search.html.twig', []);
         }
         $foundPosts = $posts->findBySearchQuery($query, $limit);
         $results = [];


65) /usr/src/myapp/src/Controller/SecurityController.php:60    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * But, this will never be executed. Symfony will intercept this first
      * and handle the logout automatically. See logout in config/packages/security.yaml
      */
-    #[Route('/logout', name: 'security_logout')]
-    public function logout() : void
+    protected function logout() : void
     {
         throw new \Exception('This should never be reached!');
     }
 }


66) /usr/src/myapp/src/Controller/SecurityController.php:63    [M] Throw_

--- Original
+++ New
@@ @@
     #[Route('/logout', name: 'security_logout')]
     public function logout() : void
     {
-        throw new \Exception('This should never be reached!');
+        new \Exception('This should never be reached!');
     }
 }


67) /usr/src/myapp/src/Controller/UserController.php:32    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
 #[Route('/profile'), IsGranted('ROLE_USER')]
 class UserController extends AbstractController
 {
-    #[Route('/edit', methods: ['GET', 'POST'], name: 'user_edit')]
+    #[Route('/edit', methods: ['POST'], name: 'user_edit')]
     public function edit(Request $request, EntityManagerInterface $entityManager) : Response
     {
         $user = $this->getUser();


68) /usr/src/myapp/src/Controller/UserController.php:54    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         }
         return $this->render('user/edit.html.twig', ['user' => $user, 'form' => $form->createView()]);
     }
-    #[Route('/change-password', methods: ['GET', 'POST'], name: 'user_change_password')]
+    #[Route('/change-password', methods: ['POST'], name: 'user_change_password')]
     public function changePassword(Request $request, UserPasswordHasherInterface $passwordHasher, EntityManagerInterface $entityManager) : Response
     {
         $user = $this->getUser();


69) /usr/src/myapp/src/DataFixtures/AppFixtures.php:34    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function load(ObjectManager $manager) : void
     {
-        $this->loadUsers($manager);
+        
         $this->loadTags($manager);
         $this->loadPosts($manager);
     }


70) /usr/src/myapp/src/DataFixtures/AppFixtures.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function load(ObjectManager $manager) : void
     {
         $this->loadUsers($manager);
-        $this->loadTags($manager);
+        
         $this->loadPosts($manager);
     }
     private function loadUsers(ObjectManager $manager) : void


71) /usr/src/myapp/src/DataFixtures/AppFixtures.php:36    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->loadUsers($manager);
         $this->loadTags($manager);
-        $this->loadPosts($manager);
+        
     }
     private function loadUsers(ObjectManager $manager) : void
     {


72) /usr/src/myapp/src/DataFixtures/AppFixtures.php:41    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function loadUsers(ObjectManager $manager) : void
     {
-        foreach ($this->getUserData() as [$fullname, $username, $password, $email, $roles]) {
+        foreach ($this->getUserData() as [$username, $password, $email, $roles]) {
             $user = new User();
             $user->setFullName($fullname);
             $user->setUsername($username);


73) /usr/src/myapp/src/DataFixtures/AppFixtures.php:41    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     private function loadUsers(ObjectManager $manager) : void
     {
-        foreach ($this->getUserData() as [$fullname, $username, $password, $email, $roles]) {
+        foreach (array() as [$fullname, $username, $password, $email, $roles]) {
             $user = new User();
             $user->setFullName($fullname);
             $user->setUsername($username);


74) /usr/src/myapp/src/DataFixtures/AppFixtures.php:43    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach ($this->getUserData() as [$fullname, $username, $password, $email, $roles]) {
             $user = new User();
-            $user->setFullName($fullname);
+            
             $user->setUsername($username);
             $user->setPassword($this->passwordHasher->hashPassword($user, $password));
             $user->setEmail($email);


75) /usr/src/myapp/src/DataFixtures/AppFixtures.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         foreach ($this->getUserData() as [$fullname, $username, $password, $email, $roles]) {
             $user = new User();
             $user->setFullName($fullname);
-            $user->setUsername($username);
+            
             $user->setPassword($this->passwordHasher->hashPassword($user, $password));
             $user->setEmail($email);
             $user->setRoles($roles);


76) /usr/src/myapp/src/DataFixtures/AppFixtures.php:45    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $user = new User();
             $user->setFullName($fullname);
             $user->setUsername($username);
-            $user->setPassword($this->passwordHasher->hashPassword($user, $password));
+            
             $user->setEmail($email);
             $user->setRoles($roles);
             $manager->persist($user);


77) /usr/src/myapp/src/DataFixtures/AppFixtures.php:46    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $user->setFullName($fullname);
             $user->setUsername($username);
             $user->setPassword($this->passwordHasher->hashPassword($user, $password));
-            $user->setEmail($email);
+            
             $user->setRoles($roles);
             $manager->persist($user);
             $this->addReference($username, $user);


78) /usr/src/myapp/src/DataFixtures/AppFixtures.php:47    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $user->setUsername($username);
             $user->setPassword($this->passwordHasher->hashPassword($user, $password));
             $user->setEmail($email);
-            $user->setRoles($roles);
+            
             $manager->persist($user);
             $this->addReference($username, $user);
         }


79) /usr/src/myapp/src/DataFixtures/AppFixtures.php:49    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $user->setPassword($this->passwordHasher->hashPassword($user, $password));
             $user->setEmail($email);
             $user->setRoles($roles);
-            $manager->persist($user);
+            
             $this->addReference($username, $user);
         }
         $manager->flush();


80) /usr/src/myapp/src/DataFixtures/AppFixtures.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $user->setEmail($email);
             $user->setRoles($roles);
             $manager->persist($user);
-            $this->addReference($username, $user);
+            
         }
         $manager->flush();
     }


81) /usr/src/myapp/src/DataFixtures/AppFixtures.php:53    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $manager->persist($user);
             $this->addReference($username, $user);
         }
-        $manager->flush();
+        
     }
     private function loadTags(ObjectManager $manager) : void
     {


82) /usr/src/myapp/src/DataFixtures/AppFixtures.php:58    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     private function loadTags(ObjectManager $manager) : void
     {
-        foreach ($this->getTagData() as $name) {
+        foreach (array() as $name) {
             $tag = new Tag();
             $tag->setName($name);
             $manager->persist($tag);


83) /usr/src/myapp/src/DataFixtures/AppFixtures.php:60    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach ($this->getTagData() as $name) {
             $tag = new Tag();
-            $tag->setName($name);
+            
             $manager->persist($tag);
             $this->addReference('tag-' . $name, $tag);
         }


84) /usr/src/myapp/src/DataFixtures/AppFixtures.php:62    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         foreach ($this->getTagData() as $name) {
             $tag = new Tag();
             $tag->setName($name);
-            $manager->persist($tag);
+            
             $this->addReference('tag-' . $name, $tag);
         }
         $manager->flush();


85) /usr/src/myapp/src/DataFixtures/AppFixtures.php:63    [M] Concat

--- Original
+++ New
@@ @@
             $tag = new Tag();
             $tag->setName($name);
             $manager->persist($tag);
-            $this->addReference('tag-' . $name, $tag);
+            $this->addReference($name . 'tag-', $tag);
         }
         $manager->flush();
     }


86) /usr/src/myapp/src/DataFixtures/AppFixtures.php:63    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             $tag = new Tag();
             $tag->setName($name);
             $manager->persist($tag);
-            $this->addReference('tag-' . $name, $tag);
+            $this->addReference($name, $tag);
         }
         $manager->flush();
     }


87) /usr/src/myapp/src/DataFixtures/AppFixtures.php:63    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             $tag = new Tag();
             $tag->setName($name);
             $manager->persist($tag);
-            $this->addReference('tag-' . $name, $tag);
+            $this->addReference('tag-', $tag);
         }
         $manager->flush();
     }


88) /usr/src/myapp/src/DataFixtures/AppFixtures.php:63    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $tag = new Tag();
             $tag->setName($name);
             $manager->persist($tag);
-            $this->addReference('tag-' . $name, $tag);
+            
         }
         $manager->flush();
     }


89) /usr/src/myapp/src/DataFixtures/AppFixtures.php:66    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $manager->persist($tag);
             $this->addReference('tag-' . $name, $tag);
         }
-        $manager->flush();
+        
     }
     private function loadPosts(ObjectManager $manager) : void
     {


90) /usr/src/myapp/src/DataFixtures/AppFixtures.php:71    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function loadPosts(ObjectManager $manager) : void
     {
-        foreach ($this->getPostData() as [$title, $slug, $summary, $content, $publishedAt, $author, $tags]) {
+        foreach ($this->getPostData() as [$slug, $summary, $content, $publishedAt, $author, $tags]) {
             $post = new Post();
             $post->setTitle($title);
             $post->setSlug($slug);


91) /usr/src/myapp/src/DataFixtures/AppFixtures.php:71    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     private function loadPosts(ObjectManager $manager) : void
     {
-        foreach ($this->getPostData() as [$title, $slug, $summary, $content, $publishedAt, $author, $tags]) {
+        foreach (array() as [$title, $slug, $summary, $content, $publishedAt, $author, $tags]) {
             $post = new Post();
             $post->setTitle($title);
             $post->setSlug($slug);


92) /usr/src/myapp/src/DataFixtures/AppFixtures.php:73    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach ($this->getPostData() as [$title, $slug, $summary, $content, $publishedAt, $author, $tags]) {
             $post = new Post();
-            $post->setTitle($title);
+            
             $post->setSlug($slug);
             $post->setSummary($summary);
             $post->setContent($content);


93) /usr/src/myapp/src/DataFixtures/AppFixtures.php:74    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         foreach ($this->getPostData() as [$title, $slug, $summary, $content, $publishedAt, $author, $tags]) {
             $post = new Post();
             $post->setTitle($title);
-            $post->setSlug($slug);
+            
             $post->setSummary($summary);
             $post->setContent($content);
             $post->setPublishedAt($publishedAt);


94) /usr/src/myapp/src/DataFixtures/AppFixtures.php:75    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $post = new Post();
             $post->setTitle($title);
             $post->setSlug($slug);
-            $post->setSummary($summary);
+            
             $post->setContent($content);
             $post->setPublishedAt($publishedAt);
             $post->setAuthor($author);


95) /usr/src/myapp/src/DataFixtures/AppFixtures.php:76    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $post->setTitle($title);
             $post->setSlug($slug);
             $post->setSummary($summary);
-            $post->setContent($content);
+            
             $post->setPublishedAt($publishedAt);
             $post->setAuthor($author);
             $post->addTag(...$tags);


96) /usr/src/myapp/src/DataFixtures/AppFixtures.php:77    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $post->setSlug($slug);
             $post->setSummary($summary);
             $post->setContent($content);
-            $post->setPublishedAt($publishedAt);
+            
             $post->setAuthor($author);
             $post->addTag(...$tags);
             foreach (range(1, 5) as $i) {


97) /usr/src/myapp/src/DataFixtures/AppFixtures.php:78    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $post->setSummary($summary);
             $post->setContent($content);
             $post->setPublishedAt($publishedAt);
-            $post->setAuthor($author);
+            
             $post->addTag(...$tags);
             foreach (range(1, 5) as $i) {
                 $comment = new Comment();


98) /usr/src/myapp/src/DataFixtures/AppFixtures.php:79    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $post->setContent($content);
             $post->setPublishedAt($publishedAt);
             $post->setAuthor($author);
-            $post->addTag(...$tags);
+            
             foreach (range(1, 5) as $i) {
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));


99) /usr/src/myapp/src/DataFixtures/AppFixtures.php:81    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $post->setPublishedAt($publishedAt);
             $post->setAuthor($author);
             $post->addTag(...$tags);
-            foreach (range(1, 5) as $i) {
+            foreach (range(0, 5) as $i) {
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));


100) /usr/src/myapp/src/DataFixtures/AppFixtures.php:81    [M] IncrementInteger

--- Original
+++ New
@@ @@
             $post->setPublishedAt($publishedAt);
             $post->setAuthor($author);
             $post->addTag(...$tags);
-            foreach (range(1, 5) as $i) {
+            foreach (range(2, 5) as $i) {
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));


101) /usr/src/myapp/src/DataFixtures/AppFixtures.php:81    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $post->setPublishedAt($publishedAt);
             $post->setAuthor($author);
             $post->addTag(...$tags);
-            foreach (range(1, 5) as $i) {
+            foreach (range(1, 4) as $i) {
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));


102) /usr/src/myapp/src/DataFixtures/AppFixtures.php:81    [M] IncrementInteger

--- Original
+++ New
@@ @@
             $post->setPublishedAt($publishedAt);
             $post->setAuthor($author);
             $post->addTag(...$tags);
-            foreach (range(1, 5) as $i) {
+            foreach (range(1, 6) as $i) {
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));


103) /usr/src/myapp/src/DataFixtures/AppFixtures.php:81    [M] Foreach_

--- Original
+++ New
@@ @@
             $post->setPublishedAt($publishedAt);
             $post->setAuthor($author);
             $post->addTag(...$tags);
-            foreach (range(1, 5) as $i) {
+            foreach (array() as $i) {
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));


104) /usr/src/myapp/src/DataFixtures/AppFixtures.php:83    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $post->addTag(...$tags);
             foreach (range(1, 5) as $i) {
                 $comment = new Comment();
-                $comment->setAuthor($this->getReference('john_user'));
+                
                 $comment->setContent($this->getRandomText(random_int(255, 512)));
                 $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
                 $post->addComment($comment);


105) /usr/src/myapp/src/DataFixtures/AppFixtures.php:84    [M] DecrementInteger

--- Original
+++ New
@@ @@
             foreach (range(1, 5) as $i) {
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
-                $comment->setContent($this->getRandomText(random_int(255, 512)));
+                $comment->setContent($this->getRandomText(random_int(254, 512)));
                 $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
                 $post->addComment($comment);
             }


106) /usr/src/myapp/src/DataFixtures/AppFixtures.php:84    [M] IncrementInteger

--- Original
+++ New
@@ @@
             foreach (range(1, 5) as $i) {
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
-                $comment->setContent($this->getRandomText(random_int(255, 512)));
+                $comment->setContent($this->getRandomText(random_int(256, 512)));
                 $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
                 $post->addComment($comment);
             }


107) /usr/src/myapp/src/DataFixtures/AppFixtures.php:84    [M] DecrementInteger

--- Original
+++ New
@@ @@
             foreach (range(1, 5) as $i) {
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
-                $comment->setContent($this->getRandomText(random_int(255, 512)));
+                $comment->setContent($this->getRandomText(random_int(255, 511)));
                 $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
                 $post->addComment($comment);
             }


108) /usr/src/myapp/src/DataFixtures/AppFixtures.php:84    [M] IncrementInteger

--- Original
+++ New
@@ @@
             foreach (range(1, 5) as $i) {
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
-                $comment->setContent($this->getRandomText(random_int(255, 512)));
+                $comment->setContent($this->getRandomText(random_int(255, 513)));
                 $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
                 $post->addComment($comment);
             }


109) /usr/src/myapp/src/DataFixtures/AppFixtures.php:84    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             foreach (range(1, 5) as $i) {
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
-                $comment->setContent($this->getRandomText(random_int(255, 512)));
+                
                 $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
                 $post->addComment($comment);
             }


110) /usr/src/myapp/src/DataFixtures/AppFixtures.php:85    [M] Concat

--- Original
+++ New
@@ @@
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));
-                $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
+                $comment->setPublishedAt(new \DateTime($i . 'now + ' . 'seconds'));
                 $post->addComment($comment);
             }
             $manager->persist($post);


111) /usr/src/myapp/src/DataFixtures/AppFixtures.php:85    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));
-                $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
+                $comment->setPublishedAt(new \DateTime($i . 'seconds'));
                 $post->addComment($comment);
             }
             $manager->persist($post);


112) /usr/src/myapp/src/DataFixtures/AppFixtures.php:85    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));
-                $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
+                $comment->setPublishedAt(new \DateTime('now + ' . 'seconds'));
                 $post->addComment($comment);
             }
             $manager->persist($post);


113) /usr/src/myapp/src/DataFixtures/AppFixtures.php:85    [M] Concat

--- Original
+++ New
@@ @@
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));
-                $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
+                $comment->setPublishedAt(new \DateTime('now + ' . 'seconds' . $i));
                 $post->addComment($comment);
             }
             $manager->persist($post);


114) /usr/src/myapp/src/DataFixtures/AppFixtures.php:85    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));
-                $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
+                $comment->setPublishedAt(new \DateTime('now + ' . $i));
                 $post->addComment($comment);
             }
             $manager->persist($post);


115) /usr/src/myapp/src/DataFixtures/AppFixtures.php:85    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $comment = new Comment();
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));
-                $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
+                
                 $post->addComment($comment);
             }
             $manager->persist($post);


116) /usr/src/myapp/src/DataFixtures/AppFixtures.php:87    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $comment->setAuthor($this->getReference('john_user'));
                 $comment->setContent($this->getRandomText(random_int(255, 512)));
                 $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
-                $post->addComment($comment);
+                
             }
             $manager->persist($post);
         }


117) /usr/src/myapp/src/DataFixtures/AppFixtures.php:90    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $comment->setPublishedAt(new \DateTime('now + ' . $i . 'seconds'));
                 $post->addComment($comment);
             }
-            $manager->persist($post);
+            
         }
         $manager->flush();
     }


118) /usr/src/myapp/src/DataFixtures/AppFixtures.php:93    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             $manager->persist($post);
         }
-        $manager->flush();
+        
     }
     private function getUserData() : array
     {


119) /usr/src/myapp/src/DataFixtures/AppFixtures.php:98    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function getUserData() : array
     {
-        return [
-            // $userData = [$fullname, $username, $password, $email, $roles];
-            ['Jane Doe', 'jane_admin', 'kitten', 'jane_admin@symfony.com', ['ROLE_ADMIN']],
-            ['Tom Doe', 'tom_admin', 'kitten', 'tom_admin@symfony.com', ['ROLE_ADMIN']],
-            ['John Doe', 'john_user', 'kitten', 'john_user@symfony.com', ['ROLE_USER']],
-        ];
+        return [['Tom Doe', 'tom_admin', 'kitten', 'tom_admin@symfony.com', ['ROLE_ADMIN']], ['John Doe', 'john_user', 'kitten', 'john_user@symfony.com', ['ROLE_USER']]];
     }
     private function getTagData() : array
     {


120) /usr/src/myapp/src/DataFixtures/AppFixtures.php:100    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         return [
             // $userData = [$fullname, $username, $password, $email, $roles];
-            ['Jane Doe', 'jane_admin', 'kitten', 'jane_admin@symfony.com', ['ROLE_ADMIN']],
+            ['Jane Doe', 'jane_admin', 'kitten', 'jane_admin@symfony.com', []],
             ['Tom Doe', 'tom_admin', 'kitten', 'tom_admin@symfony.com', ['ROLE_ADMIN']],
             ['John Doe', 'john_user', 'kitten', 'john_user@symfony.com', ['ROLE_USER']],
         ];


121) /usr/src/myapp/src/DataFixtures/AppFixtures.php:100    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         return [
             // $userData = [$fullname, $username, $password, $email, $roles];
-            ['Jane Doe', 'jane_admin', 'kitten', 'jane_admin@symfony.com', ['ROLE_ADMIN']],
+            ['jane_admin', 'kitten', 'jane_admin@symfony.com', ['ROLE_ADMIN']],
             ['Tom Doe', 'tom_admin', 'kitten', 'tom_admin@symfony.com', ['ROLE_ADMIN']],
             ['John Doe', 'john_user', 'kitten', 'john_user@symfony.com', ['ROLE_USER']],
         ];


122) /usr/src/myapp/src/DataFixtures/AppFixtures.php:101    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         return [
             // $userData = [$fullname, $username, $password, $email, $roles];
             ['Jane Doe', 'jane_admin', 'kitten', 'jane_admin@symfony.com', ['ROLE_ADMIN']],
-            ['Tom Doe', 'tom_admin', 'kitten', 'tom_admin@symfony.com', ['ROLE_ADMIN']],
+            ['Tom Doe', 'tom_admin', 'kitten', 'tom_admin@symfony.com', []],
             ['John Doe', 'john_user', 'kitten', 'john_user@symfony.com', ['ROLE_USER']],
         ];
     }


123) /usr/src/myapp/src/DataFixtures/AppFixtures.php:101    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         return [
             // $userData = [$fullname, $username, $password, $email, $roles];
             ['Jane Doe', 'jane_admin', 'kitten', 'jane_admin@symfony.com', ['ROLE_ADMIN']],
-            ['Tom Doe', 'tom_admin', 'kitten', 'tom_admin@symfony.com', ['ROLE_ADMIN']],
+            ['tom_admin', 'kitten', 'tom_admin@symfony.com', ['ROLE_ADMIN']],
             ['John Doe', 'john_user', 'kitten', 'john_user@symfony.com', ['ROLE_USER']],
         ];
     }


124) /usr/src/myapp/src/DataFixtures/AppFixtures.php:102    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             // $userData = [$fullname, $username, $password, $email, $roles];
             ['Jane Doe', 'jane_admin', 'kitten', 'jane_admin@symfony.com', ['ROLE_ADMIN']],
             ['Tom Doe', 'tom_admin', 'kitten', 'tom_admin@symfony.com', ['ROLE_ADMIN']],
-            ['John Doe', 'john_user', 'kitten', 'john_user@symfony.com', ['ROLE_USER']],
+            ['John Doe', 'john_user', 'kitten', 'john_user@symfony.com', []],
         ];
     }
     private function getTagData() : array


125) /usr/src/myapp/src/DataFixtures/AppFixtures.php:102    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             // $userData = [$fullname, $username, $password, $email, $roles];
             ['Jane Doe', 'jane_admin', 'kitten', 'jane_admin@symfony.com', ['ROLE_ADMIN']],
             ['Tom Doe', 'tom_admin', 'kitten', 'tom_admin@symfony.com', ['ROLE_ADMIN']],
-            ['John Doe', 'john_user', 'kitten', 'john_user@symfony.com', ['ROLE_USER']],
+            ['john_user', 'kitten', 'john_user@symfony.com', ['ROLE_USER']],
         ];
     }
     private function getTagData() : array


126) /usr/src/myapp/src/DataFixtures/AppFixtures.php:108    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function getTagData() : array
     {
-        return ['lorem', 'ipsum', 'consectetur', 'adipiscing', 'incididunt', 'labore', 'voluptate', 'dolore', 'pariatur'];
+        return ['ipsum', 'consectetur', 'adipiscing', 'incididunt', 'labore', 'voluptate', 'dolore', 'pariatur'];
     }
     private function getPostData() : array
     {


127) /usr/src/myapp/src/DataFixtures/AppFixtures.php:124    [M] Foreach_

--- Original
+++ New
@@ @@
     private function getPostData() : array
     {
         $posts = [];
-        foreach ($this->getPhrases() as $i => $title) {
+        foreach (array() as $i => $title) {
             // $postData = [$title, $slug, $summary, $content, $publishedAt, $author, $tags, $comments];
             $posts[] = [
                 $title,


128) /usr/src/myapp/src/DataFixtures/AppFixtures.php:126    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         foreach ($this->getPhrases() as $i => $title) {
             // $postData = [$title, $slug, $summary, $content, $publishedAt, $author, $tags, $comments];
             $posts[] = [
-                $title,
                 $this->slugger->slug($title)->lower(),
                 $this->getRandomText(),
                 $this->getPostContent(),


129) /usr/src/myapp/src/DataFixtures/AppFixtures.php:131    [M] Concat

--- Original
+++ New
@@ @@
                 $this->slugger->slug($title)->lower(),
                 $this->getRandomText(),
                 $this->getPostContent(),
-                new \DateTime('now - ' . $i . 'days'),
+                new \DateTime($i . 'now - ' . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
                 $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
                 $this->getRandomTags(),


130) /usr/src/myapp/src/DataFixtures/AppFixtures.php:131    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $this->slugger->slug($title)->lower(),
                 $this->getRandomText(),
                 $this->getPostContent(),
-                new \DateTime('now - ' . $i . 'days'),
+                new \DateTime($i . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
                 $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
                 $this->getRandomTags(),


131) /usr/src/myapp/src/DataFixtures/AppFixtures.php:131    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $this->slugger->slug($title)->lower(),
                 $this->getRandomText(),
                 $this->getPostContent(),
-                new \DateTime('now - ' . $i . 'days'),
+                new \DateTime('now - ' . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
                 $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
                 $this->getRandomTags(),


132) /usr/src/myapp/src/DataFixtures/AppFixtures.php:131    [M] Concat

--- Original
+++ New
@@ @@
                 $this->slugger->slug($title)->lower(),
                 $this->getRandomText(),
                 $this->getPostContent(),
-                new \DateTime('now - ' . $i . 'days'),
+                new \DateTime('now - ' . 'days' . $i),
                 // Ensure that the first post is written by Jane Doe to simplify tests
                 $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
                 $this->getRandomTags(),


133) /usr/src/myapp/src/DataFixtures/AppFixtures.php:131    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $this->slugger->slug($title)->lower(),
                 $this->getRandomText(),
                 $this->getPostContent(),
-                new \DateTime('now - ' . $i . 'days'),
+                new \DateTime('now - ' . $i),
                 // Ensure that the first post is written by Jane Doe to simplify tests
                 $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
                 $this->getRandomTags(),


134) /usr/src/myapp/src/DataFixtures/AppFixtures.php:133    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $this->getPostContent(),
                 new \DateTime('now - ' . $i . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
-                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
+                $this->getReference(['tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
                 $this->getRandomTags(),
             ];
         }


135) /usr/src/myapp/src/DataFixtures/AppFixtures.php:133    [M] DecrementInteger

--- Original
+++ New
@@ @@
                 $this->getPostContent(),
                 new \DateTime('now - ' . $i . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
-                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
+                $this->getReference(['jane_admin', 'tom_admin'][-1 === $i ? 0 : random_int(0, 1)]),
                 $this->getRandomTags(),
             ];
         }


136) /usr/src/myapp/src/DataFixtures/AppFixtures.php:133    [M] Identical

--- Original
+++ New
@@ @@
                 $this->getPostContent(),
                 new \DateTime('now - ' . $i . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
-                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
+                $this->getReference(['jane_admin', 'tom_admin'][0 !== $i ? 0 : random_int(0, 1)]),
                 $this->getRandomTags(),
             ];
         }


137) /usr/src/myapp/src/DataFixtures/AppFixtures.php:133    [M] DecrementInteger

--- Original
+++ New
@@ @@
                 $this->getPostContent(),
                 new \DateTime('now - ' . $i . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
-                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
+                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? -1 : random_int(0, 1)]),
                 $this->getRandomTags(),
             ];
         }


138) /usr/src/myapp/src/DataFixtures/AppFixtures.php:133    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 $this->getPostContent(),
                 new \DateTime('now - ' . $i . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
-                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
+                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 1 : random_int(0, 1)]),
                 $this->getRandomTags(),
             ];
         }


139) /usr/src/myapp/src/DataFixtures/AppFixtures.php:133    [M] DecrementInteger

--- Original
+++ New
@@ @@
                 $this->getPostContent(),
                 new \DateTime('now - ' . $i . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
-                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
+                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(-1, 1)]),
                 $this->getRandomTags(),
             ];
         }


140) /usr/src/myapp/src/DataFixtures/AppFixtures.php:133    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 $this->getPostContent(),
                 new \DateTime('now - ' . $i . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
-                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
+                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(1, 1)]),
                 $this->getRandomTags(),
             ];
         }


141) /usr/src/myapp/src/DataFixtures/AppFixtures.php:133    [M] DecrementInteger

--- Original
+++ New
@@ @@
                 $this->getPostContent(),
                 new \DateTime('now - ' . $i . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
-                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
+                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 0)]),
                 $this->getRandomTags(),
             ];
         }


142) /usr/src/myapp/src/DataFixtures/AppFixtures.php:133    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 $this->getPostContent(),
                 new \DateTime('now - ' . $i . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
-                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
+                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 2)]),
                 $this->getRandomTags(),
             ];
         }


143) /usr/src/myapp/src/DataFixtures/AppFixtures.php:133    [M] Ternary

--- Original
+++ New
@@ @@
                 $this->getPostContent(),
                 new \DateTime('now - ' . $i . 'days'),
                 // Ensure that the first post is written by Jane Doe to simplify tests
-                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? 0 : random_int(0, 1)]),
+                $this->getReference(['jane_admin', 'tom_admin'][0 === $i ? random_int(0, 1) : 0]),
                 $this->getRandomTags(),
             ];
         }


144) /usr/src/myapp/src/DataFixtures/AppFixtures.php:138    [M] ArrayOneItem

--- Original
+++ New
@@ @@
                 $this->getRandomTags(),
             ];
         }
-        return $posts;
+        return count($posts) > 1 ? array_slice($posts, 0, 1, true) : $posts;
     }
     private function getPhrases() : array
     {


145) /usr/src/myapp/src/DataFixtures/AppFixtures.php:143    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function getPhrases() : array
     {
-        return ['Lorem ipsum dolor sit amet consectetur adipiscing elit', 'Pellentesque vitae velit ex', 'Mauris dapibus risus quis suscipit vulputate', 'Eros diam egestas libero eu vulputate risus', 'In hac habitasse platea dictumst', 'Morbi tempus commodo mattis', 'Ut suscipit posuere justo at vulputate', 'Ut eleifend mauris et risus ultrices egestas', 'Aliquam sodales odio id eleifend tristique', 'Urna nisl sollicitudin id varius orci quam id turpis', 'Nulla porta lobortis ligula vel egestas', 'Curabitur aliquam euismod dolor non ornare', 'Sed varius a risus eget aliquam', 'Nunc viverra elit ac laoreet suscipit', 'Pellentesque et sapien pulvinar consectetur', 'Ubi est barbatus nix', 'Abnobas sunt hilotaes de placidus vita', 'Ubi est audax amicitia', 'Eposs sunt solems de superbus fortis', 'Vae humani generis', 'Diatrias tolerare tanquam noster caesium', 'Teres talis saepe tractare de camerarius flavum sensorem', 'Silva de secundus galatae demitto quadra', 'Sunt accentores vitare salvus flavum parses', 'Potus sensim ad ferox abnoba', 'Sunt seculaes transferre talis camerarius fluctuies', 'Era brevis ratione est', 'Sunt torquises imitari velox mirabilis medicinaes', 'Mineralis persuadere omnes finises desiderium', 'Bassus fatalis classiss virtualiter transferre de flavum'];
+        return ['Pellentesque vitae velit ex', 'Mauris dapibus risus quis suscipit vulputate', 'Eros diam egestas libero eu vulputate risus', 'In hac habitasse platea dictumst', 'Morbi tempus commodo mattis', 'Ut suscipit posuere justo at vulputate', 'Ut eleifend mauris et risus ultrices egestas', 'Aliquam sodales odio id eleifend tristique', 'Urna nisl sollicitudin id varius orci quam id turpis', 'Nulla porta lobortis ligula vel egestas', 'Curabitur aliquam euismod dolor non ornare', 'Sed varius a risus eget aliquam', 'Nunc viverra elit ac laoreet suscipit', 'Pellentesque et sapien pulvinar consectetur', 'Ubi est barbatus nix', 'Abnobas sunt hilotaes de placidus vita', 'Ubi est audax amicitia', 'Eposs sunt solems de superbus fortis', 'Vae humani generis', 'Diatrias tolerare tanquam noster caesium', 'Teres talis saepe tractare de camerarius flavum sensorem', 'Silva de secundus galatae demitto quadra', 'Sunt accentores vitare salvus flavum parses', 'Potus sensim ad ferox abnoba', 'Sunt seculaes transferre talis camerarius fluctuies', 'Era brevis ratione est', 'Sunt torquises imitari velox mirabilis medicinaes', 'Mineralis persuadere omnes finises desiderium', 'Bassus fatalis classiss virtualiter transferre de flavum'];
     }
     private function getRandomText(int $maxLength = 255) : string
     {


146) /usr/src/myapp/src/DataFixtures/AppFixtures.php:177    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         return ['Lorem ipsum dolor sit amet consectetur adipiscing elit', 'Pellentesque vitae velit ex', 'Mauris dapibus risus quis suscipit vulputate', 'Eros diam egestas libero eu vulputate risus', 'In hac habitasse platea dictumst', 'Morbi tempus commodo mattis', 'Ut suscipit posuere justo at vulputate', 'Ut eleifend mauris et risus ultrices egestas', 'Aliquam sodales odio id eleifend tristique', 'Urna nisl sollicitudin id varius orci quam id turpis', 'Nulla porta lobortis ligula vel egestas', 'Curabitur aliquam euismod dolor non ornare', 'Sed varius a risus eget aliquam', 'Nunc viverra elit ac laoreet suscipit', 'Pellentesque et sapien pulvinar consectetur', 'Ubi est barbatus nix', 'Abnobas sunt hilotaes de placidus vita', 'Ubi est audax amicitia', 'Eposs sunt solems de superbus fortis', 'Vae humani generis', 'Diatrias tolerare tanquam noster caesium', 'Teres talis saepe tractare de camerarius flavum sensorem', 'Silva de secundus galatae demitto quadra', 'Sunt accentores vitare salvus flavum parses', 'Potus sensim ad ferox abnoba', 'Sunt seculaes transferre talis camerarius fluctuies', 'Era brevis ratione est', 'Sunt torquises imitari velox mirabilis medicinaes', 'Mineralis persuadere omnes finises desiderium', 'Bassus fatalis classiss virtualiter transferre de flavum'];
     }
-    private function getRandomText(int $maxLength = 255) : string
+    private function getRandomText(int $maxLength = 254) : string
     {
         $phrases = $this->getPhrases();
         shuffle($phrases);


147) /usr/src/myapp/src/DataFixtures/AppFixtures.php:177    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         return ['Lorem ipsum dolor sit amet consectetur adipiscing elit', 'Pellentesque vitae velit ex', 'Mauris dapibus risus quis suscipit vulputate', 'Eros diam egestas libero eu vulputate risus', 'In hac habitasse platea dictumst', 'Morbi tempus commodo mattis', 'Ut suscipit posuere justo at vulputate', 'Ut eleifend mauris et risus ultrices egestas', 'Aliquam sodales odio id eleifend tristique', 'Urna nisl sollicitudin id varius orci quam id turpis', 'Nulla porta lobortis ligula vel egestas', 'Curabitur aliquam euismod dolor non ornare', 'Sed varius a risus eget aliquam', 'Nunc viverra elit ac laoreet suscipit', 'Pellentesque et sapien pulvinar consectetur', 'Ubi est barbatus nix', 'Abnobas sunt hilotaes de placidus vita', 'Ubi est audax amicitia', 'Eposs sunt solems de superbus fortis', 'Vae humani generis', 'Diatrias tolerare tanquam noster caesium', 'Teres talis saepe tractare de camerarius flavum sensorem', 'Silva de secundus galatae demitto quadra', 'Sunt accentores vitare salvus flavum parses', 'Potus sensim ad ferox abnoba', 'Sunt seculaes transferre talis camerarius fluctuies', 'Era brevis ratione est', 'Sunt torquises imitari velox mirabilis medicinaes', 'Mineralis persuadere omnes finises desiderium', 'Bassus fatalis classiss virtualiter transferre de flavum'];
     }
-    private function getRandomText(int $maxLength = 255) : string
+    private function getRandomText(int $maxLength = 256) : string
     {
         $phrases = $this->getPhrases();
         shuffle($phrases);


148) /usr/src/myapp/src/DataFixtures/AppFixtures.php:180    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
     private function getRandomText(int $maxLength = 255) : string
     {
         $phrases = $this->getPhrases();
-        shuffle($phrases);
+        
         do {
             $text = u('. ')->join($phrases)->append('.');
             array_pop($phrases);


149) /usr/src/myapp/src/DataFixtures/AppFixtures.php:182    [M] DoWhile

--- Original
+++ New
@@ @@
         do {
             $text = u('. ')->join($phrases)->append('.');
             array_pop($phrases);
-        } while ($text->length() > $maxLength);
+        } while (false);
         return $text;
     }
     private function getPostContent() : string


150) /usr/src/myapp/src/DataFixtures/AppFixtures.php:184    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         shuffle($phrases);
         do {
             $text = u('. ')->join($phrases)->append('.');
-            array_pop($phrases);
+            
         } while ($text->length() > $maxLength);
         return $text;
     }


151) /usr/src/myapp/src/DataFixtures/AppFixtures.php:185    [M] GreaterThan

--- Original
+++ New
@@ @@
         do {
             $text = u('. ')->join($phrases)->append('.');
             array_pop($phrases);
-        } while ($text->length() > $maxLength);
+        } while ($text->length() >= $maxLength);
         return $text;
     }
     private function getPostContent() : string


152) /usr/src/myapp/src/DataFixtures/AppFixtures.php:185    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         do {
             $text = u('. ')->join($phrases)->append('.');
             array_pop($phrases);
-        } while ($text->length() > $maxLength);
+        } while ($text->length() <= $maxLength);
         return $text;
     }
     private function getPostContent() : string


153) /usr/src/myapp/src/DataFixtures/AppFixtures.php:233    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
     private function getRandomTags() : array
     {
         $tagNames = $this->getTagData();
-        shuffle($tagNames);
+        
         $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
         return array_map(function ($tagName) {
             return $this->getReference('tag-' . $tagName);


154) /usr/src/myapp/src/DataFixtures/AppFixtures.php:234    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $tagNames = $this->getTagData();
         shuffle($tagNames);
-        $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
+        $selectedTags = \array_slice($tagNames, -1, random_int(2, 4));
         return array_map(function ($tagName) {
             return $this->getReference('tag-' . $tagName);
         }, $selectedTags);
     }
 }


155) /usr/src/myapp/src/DataFixtures/AppFixtures.php:234    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         $tagNames = $this->getTagData();
         shuffle($tagNames);
-        $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
+        $selectedTags = \array_slice($tagNames, 1, random_int(2, 4));
         return array_map(function ($tagName) {
             return $this->getReference('tag-' . $tagName);
         }, $selectedTags);
     }
 }


156) /usr/src/myapp/src/DataFixtures/AppFixtures.php:234    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $tagNames = $this->getTagData();
         shuffle($tagNames);
-        $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
+        $selectedTags = \array_slice($tagNames, 0, random_int(1, 4));
         return array_map(function ($tagName) {
             return $this->getReference('tag-' . $tagName);
         }, $selectedTags);
     }
 }


157) /usr/src/myapp/src/DataFixtures/AppFixtures.php:234    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         $tagNames = $this->getTagData();
         shuffle($tagNames);
-        $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
+        $selectedTags = \array_slice($tagNames, 0, random_int(3, 4));
         return array_map(function ($tagName) {
             return $this->getReference('tag-' . $tagName);
         }, $selectedTags);
     }
 }


158) /usr/src/myapp/src/DataFixtures/AppFixtures.php:234    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $tagNames = $this->getTagData();
         shuffle($tagNames);
-        $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
+        $selectedTags = \array_slice($tagNames, 0, random_int(2, 3));
         return array_map(function ($tagName) {
             return $this->getReference('tag-' . $tagName);
         }, $selectedTags);
     }
 }


159) /usr/src/myapp/src/DataFixtures/AppFixtures.php:234    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         $tagNames = $this->getTagData();
         shuffle($tagNames);
-        $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
+        $selectedTags = \array_slice($tagNames, 0, random_int(2, 5));
         return array_map(function ($tagName) {
             return $this->getReference('tag-' . $tagName);
         }, $selectedTags);
     }
 }


160) /usr/src/myapp/src/DataFixtures/AppFixtures.php:234    [M] UnwrapArraySlice

--- Original
+++ New
@@ @@
     {
         $tagNames = $this->getTagData();
         shuffle($tagNames);
-        $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
+        $selectedTags = $tagNames;
         return array_map(function ($tagName) {
             return $this->getReference('tag-' . $tagName);
         }, $selectedTags);
     }
 }


161) /usr/src/myapp/src/DataFixtures/AppFixtures.php:236    [M] Concat

--- Original
+++ New
@@ @@
         shuffle($tagNames);
         $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
         return array_map(function ($tagName) {
-            return $this->getReference('tag-' . $tagName);
+            return $this->getReference($tagName . 'tag-');
         }, $selectedTags);
     }
 }


162) /usr/src/myapp/src/DataFixtures/AppFixtures.php:236    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         shuffle($tagNames);
         $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
         return array_map(function ($tagName) {
-            return $this->getReference('tag-' . $tagName);
+            return $this->getReference($tagName);
         }, $selectedTags);
     }
 }


163) /usr/src/myapp/src/DataFixtures/AppFixtures.php:236    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         shuffle($tagNames);
         $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
         return array_map(function ($tagName) {
-            return $this->getReference('tag-' . $tagName);
+            return $this->getReference('tag-');
         }, $selectedTags);
     }
 }


164) /usr/src/myapp/src/DataFixtures/AppFixtures.php:236    [M] UnwrapArrayMap

--- Original
+++ New
@@ @@
         $tagNames = $this->getTagData();
         shuffle($tagNames);
         $selectedTags = \array_slice($tagNames, 0, random_int(2, 4));
-        return array_map(function ($tagName) {
-            return $this->getReference('tag-' . $tagName);
-        }, $selectedTags);
+        return $selectedTags;
     }
 }


165) /usr/src/myapp/src/Entity/Comment.php:86    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->publishedAt;
     }
-    public function setPublishedAt(\DateTime $publishedAt) : void
+    protected function setPublishedAt(\DateTime $publishedAt) : void
     {
         $this->publishedAt = $publishedAt;
     }


166) /usr/src/myapp/src/Entity/Post.php:158    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->comments->add($comment);
         }
     }
-    public function removeComment(Comment $comment) : void
+    protected function removeComment(Comment $comment) : void
     {
         $this->comments->removeElement($comment);
     }


167) /usr/src/myapp/src/Entity/Post.php:160    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function removeComment(Comment $comment) : void
     {
-        $this->comments->removeElement($comment);
+        
     }
     public function getSummary() : ?string
     {


168) /usr/src/myapp/src/Entity/Post.php:173    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->summary = $summary;
     }
-    public function addTag(Tag ...$tags) : void
+    protected function addTag(Tag ...$tags) : void
     {
         foreach ($tags as $tag) {
             if (!$this->tags->contains($tag)) {


169) /usr/src/myapp/src/Entity/Post.php:175    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function addTag(Tag ...$tags) : void
     {
-        foreach ($tags as $tag) {
+        foreach (array() as $tag) {
             if (!$this->tags->contains($tag)) {
                 $this->tags->add($tag);
             }


170) /usr/src/myapp/src/Entity/Post.php:176    [M] LogicalNot

--- Original
+++ New
@@ @@
     public function addTag(Tag ...$tags) : void
     {
         foreach ($tags as $tag) {
-            if (!$this->tags->contains($tag)) {
+            if ($this->tags->contains($tag)) {
                 $this->tags->add($tag);
             }
         }


171) /usr/src/myapp/src/Entity/Post.php:177    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach ($tags as $tag) {
             if (!$this->tags->contains($tag)) {
-                $this->tags->add($tag);
+                
             }
         }
     }


172) /usr/src/myapp/src/Entity/Post.php:182    [M] PublicVisibility

--- Original
+++ New
@@ @@
             }
         }
     }
-    public function removeTag(Tag $tag) : void
+    protected function removeTag(Tag $tag) : void
     {
         $this->tags->removeElement($tag);
     }


173) /usr/src/myapp/src/Entity/Post.php:184    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function removeTag(Tag $tag) : void
     {
-        $this->tags->removeElement($tag);
+        
     }
     public function getTags() : Collection
     {


174) /usr/src/myapp/src/Entity/Tag.php:35    [M] PublicVisibility

--- Original
+++ New
@@ @@
     private ?int $id = null;
     #[ORM\Column(type: 'string', unique: true)]
     private ?string $name = null;
-    public function getId() : ?int
+    protected function getId() : ?int
     {
         return $this->id;
     }


175) /usr/src/myapp/src/Entity/User.php:133    [M] PublicVisibility

--- Original
+++ New
@@ @@
      *
      * {@inheritdoc}
      */
-    public function getSalt() : ?string
+    protected function getSalt() : ?string
     {
         // We're using bcrypt in security.yaml to encode the password, so
         // the salt value is built-in and you don't have to generate one


176) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:44    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public static function getSubscribedEvents() : array
     {
         return [
-            // Errors are one of the events defined by the Console. See the
-            // rest here: https://symfony.com/doc/current/components/console/events.html
-            ConsoleEvents::ERROR => 'handleConsoleError',
             // See: https://symfony.com/doc/current/components/http_kernel.html#component-http-kernel-event-table
             KernelEvents::EXCEPTION => 'handleKernelException',
         ];


177) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:58    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * the database and then, it checks if the 'sqlite3' PHP extension is enabled
      * or not to display a better error message.
      */
-    public function handleConsoleError(ConsoleErrorEvent $event) : void
+    protected function handleConsoleError(ConsoleErrorEvent $event) : void
     {
         $commandNames = ['doctrine:fixtures:load', 'doctrine:database:create', 'doctrine:schema:create', 'doctrine:database:drop'];
         if ($event->getCommand() && \in_array($event->getCommand()->getName(), $commandNames, true)) {


178) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:60    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function handleConsoleError(ConsoleErrorEvent $event) : void
     {
-        $commandNames = ['doctrine:fixtures:load', 'doctrine:database:create', 'doctrine:schema:create', 'doctrine:database:drop'];
+        $commandNames = ['doctrine:database:create', 'doctrine:schema:create', 'doctrine:database:drop'];
         if ($event->getCommand() && \in_array($event->getCommand()->getName(), $commandNames, true)) {
             if ($this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
                 $io = new SymfonyStyle($event->getInput(), $event->getOutput());


179) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:62    [M] LogicalAnd

--- Original
+++ New
@@ @@
     public function handleConsoleError(ConsoleErrorEvent $event) : void
     {
         $commandNames = ['doctrine:fixtures:load', 'doctrine:database:create', 'doctrine:schema:create', 'doctrine:database:drop'];
-        if ($event->getCommand() && \in_array($event->getCommand()->getName(), $commandNames, true)) {
+        if ($event->getCommand() || \in_array($event->getCommand()->getName(), $commandNames, true)) {
             if ($this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
                 $io = new SymfonyStyle($event->getInput(), $event->getOutput());
                 $io->error('This command requires to have the "sqlite3" PHP extension enabled because, by default, the Symfony Demo application uses SQLite to store its information.');


180) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:63    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
         $commandNames = ['doctrine:fixtures:load', 'doctrine:database:create', 'doctrine:schema:create', 'doctrine:database:drop'];
         if ($event->getCommand() && \in_array($event->getCommand()->getName(), $commandNames, true)) {
-            if ($this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
+            if ($this->isSQLitePlatform() && \extension_loaded('sqlite3')) {
                 $io = new SymfonyStyle($event->getInput(), $event->getOutput());
                 $io->error('This command requires to have the "sqlite3" PHP extension enabled because, by default, the Symfony Demo application uses SQLite to store its information.');
             }


181) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:63    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
         $commandNames = ['doctrine:fixtures:load', 'doctrine:database:create', 'doctrine:schema:create', 'doctrine:database:drop'];
         if ($event->getCommand() && \in_array($event->getCommand()->getName(), $commandNames, true)) {
-            if ($this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
+            if ($this->isSQLitePlatform() || !\extension_loaded('sqlite3')) {
                 $io = new SymfonyStyle($event->getInput(), $event->getOutput());
                 $io->error('This command requires to have the "sqlite3" PHP extension enabled because, by default, the Symfony Demo application uses SQLite to store its information.');
             }


182) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:65    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($event->getCommand() && \in_array($event->getCommand()->getName(), $commandNames, true)) {
             if ($this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
                 $io = new SymfonyStyle($event->getInput(), $event->getOutput());
-                $io->error('This command requires to have the "sqlite3" PHP extension enabled because, by default, the Symfony Demo application uses SQLite to store its information.');
+                
             }
         }
     }


183) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:86    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $isDriverException = $exception instanceof DriverException || $previousException instanceof DriverException;
         // Check if SQLite is enabled
         if ($isDriverException && $this->isSQLitePlatform() && !\extension_loaded('sqlite3')) {
-            $event->setThrowable(new \Exception('PHP extension "sqlite3" must be enabled because, by default, the Symfony Demo application uses SQLite to store its information.'));
+            
         }
     }
     /**


184) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:97    [M] Identical

--- Original
+++ New
@@ @@
     private function isSQLitePlatform() : bool
     {
         $databasePlatform = $this->entityManager->getConnection()->getDatabasePlatform();
-        return $databasePlatform ? 'sqlite' === $databasePlatform->getName() : false;
+        return $databasePlatform ? 'sqlite' !== $databasePlatform->getName() : false;
     }
 }


185) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:97    [M] FalseValue

--- Original
+++ New
@@ @@
     private function isSQLitePlatform() : bool
     {
         $databasePlatform = $this->entityManager->getConnection()->getDatabasePlatform();
-        return $databasePlatform ? 'sqlite' === $databasePlatform->getName() : false;
+        return $databasePlatform ? 'sqlite' === $databasePlatform->getName() : true;
     }
 }


186) /usr/src/myapp/src/EventSubscriber/CheckRequirementsSubscriber.php:97    [M] Ternary

--- Original
+++ New
@@ @@
     private function isSQLitePlatform() : bool
     {
         $databasePlatform = $this->entityManager->getConnection()->getDatabasePlatform();
-        return $databasePlatform ? 'sqlite' === $databasePlatform->getName() : false;
+        return $databasePlatform ? false : 'sqlite' === $databasePlatform->getName();
     }
 }


187) /usr/src/myapp/src/EventSubscriber/CommentNotificationSubscriber.php:38    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public static function getSubscribedEvents() : array
     {
-        return [CommentCreatedEvent::class => 'onCommentCreated'];
+        return [];
     }
     public function onCommentCreated(CommentCreatedEvent $event) : void
     {


188) /usr/src/myapp/src/EventSubscriber/ControllerSubscriber.php:35    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public static function getSubscribedEvents() : array
     {
-        return [KernelEvents::CONTROLLER => 'registerCurrentController'];
+        return [];
     }
     public function registerCurrentController(ControllerEvent $event) : void
     {


189) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:41    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $this->locales = explode('|', trim($locales));
         if (empty($this->locales)) {
-            throw new \UnexpectedValueException('The list of supported locales must not be empty.');
+            new \UnexpectedValueException('The list of supported locales must not be empty.');
         }
         $this->defaultLocale = $defaultLocale ?: $this->locales[0];
         if (!\in_array($this->defaultLocale, $this->locales, true)) {


190) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:47    [M] Throw_

--- Original
+++ New
@@ @@
         }
         $this->defaultLocale = $defaultLocale ?: $this->locales[0];
         if (!\in_array($this->defaultLocale, $this->locales, true)) {
-            throw new \UnexpectedValueException(sprintf('The default locale ("%s") must be one of "%s".', $this->defaultLocale, $locales));
+            new \UnexpectedValueException(sprintf('The default locale ("%s") must be one of "%s".', $this->defaultLocale, $locales));
         }
         // Add the default locale at the first position of the array,
         // because Symfony\HttpFoundation\Request::getPreferredLanguage


191) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:59    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public static function getSubscribedEvents() : array
     {
-        return [KernelEvents::REQUEST => 'onKernelRequest'];
+        return [];
     }
     public function onKernelRequest(RequestEvent $event) : void
     {


192) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:82    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         }
         $preferredLanguage = $request->getPreferredLanguage($this->locales);
         if ($preferredLanguage !== $this->defaultLocale) {
-            $response = new RedirectResponse($this->urlGenerator->generate('homepage', ['_locale' => $preferredLanguage]));
+            $response = new RedirectResponse($this->urlGenerator->generate('homepage', []));
             $event->setResponse($response);
         }
     }
 }


193) /usr/src/myapp/src/EventSubscriber/RedirectToPreferredLocaleSubscriber.php:83    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $preferredLanguage = $request->getPreferredLanguage($this->locales);
         if ($preferredLanguage !== $this->defaultLocale) {
             $response = new RedirectResponse($this->urlGenerator->generate('homepage', ['_locale' => $preferredLanguage]));
-            $event->setResponse($response);
+            
         }
     }
 }


194) /usr/src/myapp/src/Pagination/Paginator.php:52    [M] FalseValue

--- Original
+++ New
@@ @@
         $firstResult = ($this->currentPage - 1) * $this->pageSize;
         $query = $this->queryBuilder->setFirstResult($firstResult)->setMaxResults($this->pageSize)->getQuery();
         if (0 === \count($this->queryBuilder->getDQLPart('join'))) {
-            $query->setHint(CountWalker::HINT_DISTINCT, false);
+            $query->setHint(CountWalker::HINT_DISTINCT, true);
         }
         $paginator = new DoctrinePaginator($query, true);
         $useOutputWalkers = \count($this->queryBuilder->getDQLPart('having') ?: []) > 0;


195) /usr/src/myapp/src/Pagination/Paginator.php:52    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $firstResult = ($this->currentPage - 1) * $this->pageSize;
         $query = $this->queryBuilder->setFirstResult($firstResult)->setMaxResults($this->pageSize)->getQuery();
         if (0 === \count($this->queryBuilder->getDQLPart('join'))) {
-            $query->setHint(CountWalker::HINT_DISTINCT, false);
+            
         }
         $paginator = new DoctrinePaginator($query, true);
         $useOutputWalkers = \count($this->queryBuilder->getDQLPart('having') ?: []) > 0;


196) /usr/src/myapp/src/Pagination/Paginator.php:76    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return (int) ceil($this->numResults / $this->pageSize);
     }
-    public function getPageSize() : int
+    protected function getPageSize() : int
     {
         return $this->pageSize;
     }


197) /usr/src/myapp/src/Pagination/Paginator.php:86    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->currentPage > 1;
     }
-    public function getPreviousPage() : int
+    protected function getPreviousPage() : int
     {
         return max(1, $this->currentPage - 1);
     }


198) /usr/src/myapp/src/Pagination/Paginator.php:88    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public function getPreviousPage() : int
     {
-        return max(1, $this->currentPage - 1);
+        return max(0, $this->currentPage - 1);
     }
     public function hasNextPage() : bool
     {


199) /usr/src/myapp/src/Pagination/Paginator.php:88    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public function getPreviousPage() : int
     {
-        return max(1, $this->currentPage - 1);
+        return max(2, $this->currentPage - 1);
     }
     public function hasNextPage() : bool
     {


200) /usr/src/myapp/src/Pagination/Paginator.php:88    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public function getPreviousPage() : int
     {
-        return max(1, $this->currentPage - 1);
+        return max(1, $this->currentPage - 0);
     }
     public function hasNextPage() : bool
     {


201) /usr/src/myapp/src/Pagination/Paginator.php:88    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public function getPreviousPage() : int
     {
-        return max(1, $this->currentPage - 1);
+        return max(1, $this->currentPage - 2);
     }
     public function hasNextPage() : bool
     {


202) /usr/src/myapp/src/Pagination/Paginator.php:88    [M] Minus

--- Original
+++ New
@@ @@
     }
     public function getPreviousPage() : int
     {
-        return max(1, $this->currentPage - 1);
+        return max(1, $this->currentPage + 1);
     }
     public function hasNextPage() : bool
     {


203) /usr/src/myapp/src/Pagination/Paginator.php:106    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->numResults > $this->pageSize;
     }
-    public function getNumResults() : int
+    protected function getNumResults() : int
     {
         return $this->numResults;
     }


204) /usr/src/myapp/src/Repository/PostRepository.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $qb = $this->createQueryBuilder('p')->addSelect('a', 't')->innerJoin('p.author', 'a')->leftJoin('p.tags', 't')->where('p.publishedAt <= :now')->orderBy('p.publishedAt', 'DESC')->setParameter('now', new \DateTime());
         if (null !== $tag) {
-            $qb->andWhere(':tag MEMBER OF p.tags')->setParameter('tag', $tag);
+            
         }
         return (new Paginator($qb))->paginate($page);
     }


205) /usr/src/myapp/src/Twig/AppExtension.php:44    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function getFunctions() : array
     {
-        return [new TwigFunction('locales', [$this, 'getLocales'])];
+        return [];
     }
     /**
      * Takes the list of codes of the locales (languages) enabled in the


206) /usr/src/myapp/src/Twig/AppExtension.php:45    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function getFunctions() : array
     {
-        return [new TwigFunction('locales', [$this, 'getLocales'])];
+        return [new TwigFunction('locales', ['getLocales'])];
     }
     /**
      * Takes the list of codes of the locales (languages) enabled in the


207) /usr/src/myapp/src/Twig/SourceCodeExtension.php:43    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function getFunctions() : array
     {
-        return [new TwigFunction('show_source_code', [$this, 'showSourceCode'], ['is_safe' => ['html'], 'needs_environment' => true])];
+        return [];
     }
     /**
      * @param string|TemplateWrapper|array $template


208) /usr/src/myapp/src/Twig/SourceCodeExtension.php:44    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function getFunctions() : array
     {
-        return [new TwigFunction('show_source_code', [$this, 'showSourceCode'], ['is_safe' => ['html'], 'needs_environment' => true])];
+        return [new TwigFunction('show_source_code', ['showSourceCode'], ['is_safe' => ['html'], 'needs_environment' => true])];
     }
     /**
      * @param string|TemplateWrapper|array $template


209) /usr/src/myapp/src/Twig/SourceCodeExtension.php:44    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function getFunctions() : array
     {
-        return [new TwigFunction('show_source_code', [$this, 'showSourceCode'], ['is_safe' => ['html'], 'needs_environment' => true])];
+        return [new TwigFunction('show_source_code', [$this, 'showSourceCode'], ['is_safe' => [], 'needs_environment' => true])];
     }
     /**
      * @param string|TemplateWrapper|array $template


210) /usr/src/myapp/src/Twig/SourceCodeExtension.php:44    [M] TrueValue

--- Original
+++ New
@@ @@
      */
     public function getFunctions() : array
     {
-        return [new TwigFunction('show_source_code', [$this, 'showSourceCode'], ['is_safe' => ['html'], 'needs_environment' => true])];
+        return [new TwigFunction('show_source_code', [$this, 'showSourceCode'], ['is_safe' => ['html'], 'needs_environment' => false])];
     }
     /**
      * @param string|TemplateWrapper|array $template


211) /usr/src/myapp/src/Twig/SourceCodeExtension.php:44    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function getFunctions() : array
     {
-        return [new TwigFunction('show_source_code', [$this, 'showSourceCode'], ['is_safe' => ['html'], 'needs_environment' => true])];
+        return [new TwigFunction('show_source_code', [$this, 'showSourceCode'], ['needs_environment' => true])];
     }
     /**
      * @param string|TemplateWrapper|array $template


212) /usr/src/myapp/src/Twig/SourceCodeExtension.php:69    [M] Throw_

--- Original
+++ New
@@ @@
         }
         $method = $this->getCallableReflector($this->controller);
         if (false === ($classCode = file($method->getFileName()))) {
-            throw new \LogicException(sprintf('There was an error while trying to read the contents of the "%s" file.', $method->getFileName()));
+            new \LogicException(sprintf('There was an error while trying to read the contents of the "%s" file.', $method->getFileName()));
         }
         $startLine = $method->getStartLine() - 1;
         $endLine = $method->getEndLine();


213) /usr/src/myapp/src/Twig/SourceCodeExtension.php:105    [M] InstanceOf_

--- Original
+++ New
@@ @@
         if (\is_array($callable)) {
             return new \ReflectionMethod($callable[0], $callable[1]);
         }
-        if (\is_object($callable) && !$callable instanceof \Closure) {
+        if (\is_object($callable) && !true) {
             $r = new \ReflectionObject($callable);
             return $r->getMethod('__invoke');
         }


214) /usr/src/myapp/src/Twig/SourceCodeExtension.php:105    [M] InstanceOf_

--- Original
+++ New
@@ @@
         if (\is_array($callable)) {
             return new \ReflectionMethod($callable[0], $callable[1]);
         }
-        if (\is_object($callable) && !$callable instanceof \Closure) {
+        if (\is_object($callable) && !false) {
             $r = new \ReflectionObject($callable);
             return $r->getMethod('__invoke');
         }


215) /usr/src/myapp/src/Twig/SourceCodeExtension.php:105    [M] LogicalNot

--- Original
+++ New
@@ @@
         if (\is_array($callable)) {
             return new \ReflectionMethod($callable[0], $callable[1]);
         }
-        if (\is_object($callable) && !$callable instanceof \Closure) {
+        if (\is_object($callable) && $callable instanceof \Closure) {
             $r = new \ReflectionObject($callable);
             return $r->getMethod('__invoke');
         }


216) /usr/src/myapp/src/Twig/SourceCodeExtension.php:105    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (\is_array($callable)) {
             return new \ReflectionMethod($callable[0], $callable[1]);
         }
-        if (\is_object($callable) && !$callable instanceof \Closure) {
+        if (\is_object($callable) || !$callable instanceof \Closure) {
             $r = new \ReflectionObject($callable);
             return $r->getMethod('__invoke');
         }
